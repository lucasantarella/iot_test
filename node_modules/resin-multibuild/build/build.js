"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Promise = require("bluebird");
const _ = require("lodash");
const resin_docker_build_1 = require("resin-docker-build");
const errors_1 = require("./errors");
const external_1 = require("./external");
const local_image_1 = require("./local-image");
function taskHooks(task, docker, resolve) {
    let startTime;
    return {
        buildSuccess: (imageId, layers) => {
            const tag = task.tag != null ? task.tag : imageId;
            const image = new local_image_1.LocalImage(docker, tag, task.serviceName, { external: false, successful: true });
            image.layers = layers;
            image.startTime = startTime;
            image.endTime = Date.now();
            image.dockerfile = task.dockerfile;
            image.projectType = task.projectType;
            resolve(image);
        },
        buildFailure: (error, layers) => {
            const image = new local_image_1.LocalImage(docker, layers[layers.length - 1], task.serviceName, { external: false, successful: false });
            image.layers = layers;
            image.error = error;
            image.startTime = startTime;
            image.endTime = Date.now();
            image.dockerfile = task.dockerfile;
            image.projectType = task.projectType;
            resolve(image);
        },
        buildStream: (stream) => {
            startTime = Date.now();
            if (_.isFunction(task.streamHook)) {
                task.streamHook(stream);
            }
            task.buildStream.pipe(stream);
        },
    };
}
const generateBuildArgs = (task) => {
    return {
        buildargs: task.args,
    };
};
const generateLabels = (task) => {
    return {
        labels: task.labels,
    };
};
function runBuildTask(task, docker) {
    if (task.external) {
        return external_1.pullExternal(task, docker);
    }
    return new Promise((resolve, reject) => {
        if (task.buildStream == null) {
            reject(new errors_1.BuildProcessError('Null build stream on non-external image'));
            return;
        }
        let dockerOpts = task.dockerOpts || {};
        dockerOpts = _.merge(dockerOpts, generateBuildArgs(task), generateLabels(task));
        if (task.tag != null) {
            dockerOpts = _.merge(dockerOpts, { t: task.tag });
        }
        const builder = new resin_docker_build_1.Builder(docker);
        const hooks = taskHooks(task, docker, resolve);
        builder.createBuildStream(dockerOpts, hooks, reject);
    });
}
exports.runBuildTask = runBuildTask;
//# sourceMappingURL=build.js.map