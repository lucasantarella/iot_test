"use strict";
exports.__esModule = true;
var errors = require("./errors");
function getOrCreate(api, resource, body, filter) {
    return create(api, resource, body)["catch"](errors.ObjectDoesNotExistError, function (_e) {
        return find(api, resource, { $filter: filter }).then(function (obj) {
            if (obj.length > 0) {
                return obj[0];
            }
            throw new errors.ObjectDoesNotExistError();
        });
    });
}
exports.getOrCreate = getOrCreate;
function create(api, resource, body) {
    return api.post({ resource: resource, body: body })["catch"](wrapResponseError);
}
exports.create = create;
function update(api, resource, id, body) {
    return api.patch({ resource: resource, id: id, body: body })["catch"](wrapResponseError);
}
exports.update = update;
function find(api, resource, options) {
    return api.get({ resource: resource, options: options })["catch"](wrapResponseError);
}
exports.find = find;
function get(api, resource, id, expand) {
    var options;
    if (expand) {
        options = { $expand: expand };
    }
    return api.get({ resource: resource, id: id, options: options })["catch"](wrapResponseError);
}
exports.get = get;
function wrapResponseError(e) {
    var error = e;
    if (!error.statusCode) {
        throw e;
    }
    switch (error.statusCode) {
        case 400:
            throw new errors.BadRequestError(e);
        case 401:
            throw new errors.UnauthorisedError(e);
        case 404:
            throw new errors.ObjectDoesNotExistError(e);
        case 500:
            throw new errors.ServerError(e);
        default:
            throw new errors.HttpResponseError(e, error.statusCode);
    }
}
//# sourceMappingURL=models.js.map