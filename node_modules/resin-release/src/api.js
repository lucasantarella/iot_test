"use strict";
exports.__esModule = true;
var Promise = require("bluebird");
var _ = require("lodash");
var ApiClient = require("pinejs-client");
var models = require("./models");
var MAX_CONCURRENT_REQUESTS = 5;
function createClient(config) {
    return new ApiClient({
        apiPrefix: config.apiEndpoint + "/v5/",
        passthrough: {
            headers: {
                Authorization: config.auth
            }
        }
    });
}
exports.createClient = createClient;
function create(req) {
    var api = req.client;
    return Promise.join(getUser(api, req.user), getApplication(api, req.application), function (user, application) {
        return createRelease(api, {
            is_created_by__user: user.id,
            belongs_to__application: application.id,
            composition: req.composition,
            commit: req.commit,
            status: 'running',
            source: req.source,
            start_timestamp: new Date()
        })
            .then(function (release) {
            return { release: release, serviceImages: {} };
        })
            .tap(function (res) {
            return Promise.map(_.toPairs(req.composition.services), function (_a) {
                var serviceName = _a[0], serviceDescription = _a[1];
                return getOrCreateService(api, {
                    application: application.id,
                    service_name: serviceName
                })
                    .tap(function (service) {
                    return createImage(api, res.release.id, serviceDescription.labels, serviceDescription.environment, {
                        is_a_build_of__service: service.id,
                        status: 'running',
                        start_timestamp: new Date()
                    })
                        .tap(function (img) {
                        res.serviceImages[serviceName] = img;
                    });
                });
            }, {
                concurrency: MAX_CONCURRENT_REQUESTS
            });
        });
    });
}
exports.create = create;
function updateRelease(api, id, body) {
    return models.update(api, 'release', id, body);
}
exports.updateRelease = updateRelease;
function updateImage(api, id, body) {
    return models.update(api, 'image', id, body);
}
exports.updateImage = updateImage;
function getUser(api, id) {
    return models.get(api, 'user', id);
}
function getApplication(api, id) {
    return models.get(api, 'application', id);
}
function getOrCreateService(api, body) {
    return models.getOrCreate(api, 'service', body, {
        application: body.application,
        service_name: body.service_name
    });
}
function createRelease(api, body) {
    return models.create(api, 'release', body);
}
function createImage(api, release, labels, envvars, body) {
    return models.create(api, 'image', body).tap(function (image) {
        return models.create(api, 'image__is_part_of__release', {
            is_part_of__release: release,
            image: image.id
        })
            .tap(function (releaseImage) {
            return Promise.map(_.toPairs(labels), function (_a) {
                var name = _a[0], value = _a[1];
                return models.create(api, 'image_label', {
                    release_image: releaseImage.id,
                    label_name: name,
                    value: (value || '').toString()
                });
            }, {
                concurrency: MAX_CONCURRENT_REQUESTS
            });
        })
            .tap(function (releaseImage) {
            return Promise.map(_.toPairs(envvars), function (_a) {
                var name = _a[0], value = _a[1];
                return models.create(api, 'image_environment_variable', {
                    release_image: releaseImage.id,
                    name: name,
                    value: (value || '').toString()
                });
            }, {
                concurrency: MAX_CONCURRENT_REQUESTS
            });
        });
    });
}
//# sourceMappingURL=api.js.map