{"version":3,"sources":["../src/resolver.ts"],"names":[],"mappings":";;AAEA,qCAA8B;AAIrB,iBAJF,gBAAM,CAIE","file":"resolver.js","sourcesContent":["import * as Promise from 'bluebird';\n\nimport Bundle from './bundle';\nimport { FileInfo } from './fileInfo';\n\n// Make the external types available to implementers\nexport { Bundle, FileInfo };\n/**\n * Resolver: Base interface for any project type resolver.\n */\nexport interface Resolver {\n\t/**\n\t * priority: The priority that this resolver should take, when trying to resolve\n\t * a resin-bundle, e.g. a resolver with a higher priority will attempt to make\n\t * sense of the given bundle before one with a lower priority\n\t */\n\tpriority: number;\n\n\t/**\n\t * name: The friendly name of the project that this resolver resolves\n\t */\n\tname: string;\n\n\t/**\n\t * entry: Provide this resolver with a entry into a tar archive (the transport type\n\t * of a resin-bundle) and the resolver should save the contents if it is applicable\n\t * to this type of resolver. For example a Dockerfile.template resolver should save\n\t * the contents of a Dockerfile.template.\n\t *\n\t * @param file\n\t *  The contents and information about the file found.\n\t */\n\tentry(file: FileInfo): void;\n\n\t/**\n\t * isSatisfied: Once all of the entries in the tar stream have been provided to\n\t * the resolvers, the isSatisfied function will be called in order of priority.\n\t * If a resolver returns true, that resolver will then be used to populate the\n\t * resin-bundle with the necessary files to pass to a docker build - generally\n\t * just a Dockerfile, but not limited to.\n\t *\n\t * @return\n\t *  True if this resolver has enough information to produce a docker-compatible\n\t *  build artifact (normally Dockerfile)\n\t */\n\tisSatisfied(bundle: Bundle): boolean;\n\n\t/**\n\t * resolve: Once a resolver has reported itself as being satisfied with the input,\n\t * resolve will be called, which will return a promise of a list of files to be added\n\t * to the bundle, which will allow Docker to build the bundle.\n\t *\n\t * @param bundle\n\t * \tThe resin-bundle which will be resolved\n\t * @return\n\t *  A promise of a list of files which when added to the bundle allow docker\n\t *  to build the bundle\n\t */\n\tresolve(bundle: Bundle): Promise<FileInfo[]>;\n}\n"],"sourceRoot":"src"}