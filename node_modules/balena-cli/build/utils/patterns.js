"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
const Promise = require("bluebird");
const form = require("resin-cli-form");
const visuals = require("resin-cli-visuals");
const BalenaSdk = require("balena-sdk");
const chalk_1 = require("chalk");
const validation = require("./validation");
const messages = require("./messages");
const balena = BalenaSdk.fromSharedOptions();
function authenticate(options) {
    return form
        .run([
        {
            message: 'Email:',
            name: 'email',
            type: 'input',
            validate: validation.validateEmail,
        },
        {
            message: 'Password:',
            name: 'password',
            type: 'password',
        },
    ], { override: options })
        .then(balena.auth.login)
        .then(balena.auth.twoFactor.isPassed)
        .then((isTwoFactorAuthPassed) => {
        if (isTwoFactorAuthPassed) {
            return;
        }
        return form
            .ask({
            message: 'Two factor auth challenge:',
            name: 'code',
            type: 'input',
        })
            .then(balena.auth.twoFactor.challenge)
            .catch((error) => {
            return balena.auth.logout().then(() => {
                if (error.name === 'BalenaRequestError' &&
                    error.statusCode === 401) {
                    throw new Error('Invalid two factor authentication code');
                }
                throw error;
            });
        });
    });
}
exports.authenticate = authenticate;
function askLoginType() {
    return form.ask({
        message: 'How would you like to login?',
        name: 'loginType',
        type: 'list',
        choices: [
            {
                name: 'Web authorization (recommended)',
                value: 'web',
            },
            {
                name: 'Credentials',
                value: 'credentials',
            },
            {
                name: 'Authentication token',
                value: 'token',
            },
            {
                name: "I don't have a balena account!",
                value: 'register',
            },
        ],
    });
}
exports.askLoginType = askLoginType;
function selectDeviceType() {
    return balena.models.config.getDeviceTypes().then(deviceTypes => {
        deviceTypes = _.sortBy(deviceTypes, 'name');
        return form.ask({
            message: 'Device Type',
            type: 'list',
            choices: _.map(deviceTypes, ({ slug: value, name }) => ({
                name,
                value,
            })),
        });
    });
}
exports.selectDeviceType = selectDeviceType;
function confirm(yesOption, message, yesMessage) {
    return Promise.try(function () {
        if (yesOption) {
            if (yesMessage) {
                console.log(yesMessage);
            }
            return true;
        }
        return form.ask({
            message,
            type: 'confirm',
            default: false,
        });
    }).then(function (confirmed) {
        if (!confirmed) {
            throw new Error('Aborted');
        }
    });
}
exports.confirm = confirm;
function selectApplication(filter) {
    return balena.models.application
        .hasAny()
        .then(function (hasAnyApplications) {
        if (!hasAnyApplications) {
            throw new Error("You don't have any applications");
        }
        return balena.models.application.getAll();
    })
        .filter(filter || _.constant(true))
        .then(applications => {
        return form.ask({
            message: 'Select an application',
            type: 'list',
            choices: _.map(applications, application => ({
                name: `${application.app_name} (${application.device_type})`,
                value: application.app_name,
            })),
        });
    });
}
exports.selectApplication = selectApplication;
function selectOrCreateApplication() {
    return balena.models.application
        .hasAny()
        .then(hasAnyApplications => {
        if (!hasAnyApplications)
            return;
        return balena.models.application.getAll().then(applications => {
            const appOptions = _.map(applications, application => ({
                name: `${application.app_name} (${application.device_type})`,
                value: application.app_name,
            }));
            appOptions.unshift({
                name: 'Create a new application',
                value: null,
            });
            return form.ask({
                message: 'Select an application',
                type: 'list',
                choices: appOptions,
            });
        });
    })
        .then(application => {
        if (application) {
            return application;
        }
        return form.ask({
            message: 'Choose a Name for your new application',
            type: 'input',
            validate: validation.validateApplicationName,
        });
    });
}
exports.selectOrCreateApplication = selectOrCreateApplication;
function awaitDevice(uuid) {
    return balena.models.device.getName(uuid).then(deviceName => {
        const spinner = new visuals.Spinner(`Waiting for ${deviceName} to come online`);
        const poll = () => {
            return balena.models.device.isOnline(uuid).then(function (isOnline) {
                if (isOnline) {
                    spinner.stop();
                    console.info(`The device **${deviceName}** is online!`);
                    return;
                }
                else {
                    spinner.start();
                    return Promise.delay(3000).then(poll);
                }
            });
        };
        console.info(`Waiting for ${deviceName} to connect to balena...`);
        return poll().return(uuid);
    });
}
exports.awaitDevice = awaitDevice;
function inferOrSelectDevice(preferredUuid) {
    return balena.models.device
        .getAll()
        .filter(device => device.is_online)
        .then(onlineDevices => {
        if (_.isEmpty(onlineDevices)) {
            throw new Error("You don't have any devices online");
        }
        const defaultUuid = _(onlineDevices)
            .map('uuid')
            .includes(preferredUuid)
            ? preferredUuid
            : onlineDevices[0].uuid;
        return form.ask({
            message: 'Select a device',
            type: 'list',
            default: defaultUuid,
            choices: _.map(onlineDevices, device => ({
                name: `${device.device_name || 'Untitled'} (${device.uuid.slice(0, 7)})`,
                value: device.uuid,
            })),
        });
    });
}
exports.inferOrSelectDevice = inferOrSelectDevice;
function selectFromList(message, choices) {
    return form.ask({
        message,
        type: 'list',
        choices: _.map(choices, s => ({
            name: s.name,
            value: s,
        })),
    });
}
exports.selectFromList = selectFromList;
function printErrorMessage(message) {
    console.error(chalk_1.default.red(message));
    console.error(chalk_1.default.red(`\n${messages.getHelp}\n`));
}
exports.printErrorMessage = printErrorMessage;
function exitWithExpectedError(message) {
    if (message instanceof Error) {
        ({ message } = message);
    }
    printErrorMessage(message);
    process.exit(1);
    throw new Error('exit');
}
exports.exitWithExpectedError = exitWithExpectedError;
//# sourceMappingURL=patterns.js.map