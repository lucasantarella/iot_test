"use strict";
const chalk_1 = require("chalk");
const _ = require("lodash");
const os_1 = require("os");
const resin_stream_logger_1 = require("resin-stream-logger");
class Logger {
    constructor() {
        const logger = new resin_stream_logger_1.StreamLogger();
        logger.addPrefix('build', chalk_1.default.blue('[Build]'));
        logger.addPrefix('info', chalk_1.default.cyan('[Info]'));
        logger.addPrefix('debug', chalk_1.default.magenta('[Debug]'));
        logger.addPrefix('success', chalk_1.default.green('[Success]'));
        logger.addPrefix('warn', chalk_1.default.yellow('[Warn]'));
        logger.addPrefix('error', chalk_1.default.red('[Error]'));
        logger.addPrefix('logs', chalk_1.default.green('[Logs]'));
        this.streams = {
            build: logger.createLogStream('build'),
            info: logger.createLogStream('info'),
            debug: logger.createLogStream('debug'),
            success: logger.createLogStream('success'),
            warn: logger.createLogStream('warn'),
            error: logger.createLogStream('error'),
            logs: logger.createLogStream('logs'),
        };
        _.forEach(this.streams, function (stream, key) {
            if (key !== 'debug' || process.env.DEBUG) {
                stream.pipe(process.stdout);
            }
        });
        this.formatMessage = logger.formatWithPrefix.bind(logger);
    }
    logInfo(msg) {
        return this.streams.info.write(msg + os_1.EOL);
    }
    logDebug(msg) {
        return this.streams.debug.write(msg + os_1.EOL);
    }
    logSuccess(msg) {
        return this.streams.success.write(msg + os_1.EOL);
    }
    logWarn(msg) {
        return this.streams.warn.write(msg + os_1.EOL);
    }
    logError(msg) {
        return this.streams.error.write(msg + os_1.EOL);
    }
    logBuild(msg) {
        return this.streams.build.write(msg + os_1.EOL);
    }
    logLogs(msg) {
        return this.streams.logs.write(msg + os_1.EOL);
    }
}
module.exports = Logger;
//# sourceMappingURL=logger.js.map