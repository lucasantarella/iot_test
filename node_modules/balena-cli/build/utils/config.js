"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Promise = require("bluebird");
const BalenaSdk = require("balena-sdk");
const semver = require("resin-semver");
const balena = BalenaSdk.fromSharedOptions();
function generateBaseConfig(application, options) {
    options = Object.assign({}, options, { appUpdatePollInterval: options.appUpdatePollInterval || 10 });
    const promise = balena.models.os.getConfig(application.app_name, options);
    return promise.tap(config => {
        delete config.apiKey;
    });
}
exports.generateBaseConfig = generateBaseConfig;
function generateApplicationConfig(application, options) {
    return generateBaseConfig(application, options).tap(config => {
        if (semver.satisfies(options.version, '<2.7.8')) {
            return addApplicationKey(config, application.id);
        }
        return addProvisioningKey(config, application.id);
    });
}
exports.generateApplicationConfig = generateApplicationConfig;
function generateDeviceConfig(device, deviceApiKey, options) {
    return balena.models.application
        .get(device.belongs_to__application.__id)
        .then(application => {
        const baseConfigOpts = Object.assign({}, options, { deviceType: device.device_type });
        return generateBaseConfig(application, baseConfigOpts).tap(config => {
            if (deviceApiKey == null &&
                semver.satisfies(options.version, '<2.0.3')) {
                return addApplicationKey(config, application.id);
            }
            return addDeviceKey(config, device.uuid, deviceApiKey || true);
        });
    })
        .then(config => {
        config.registered_at = Math.floor(Date.now() / 1000);
        config.deviceId = device.id;
        config.uuid = device.uuid;
        return config;
    });
}
exports.generateDeviceConfig = generateDeviceConfig;
function addApplicationKey(config, applicationNameOrId) {
    return balena.models.application
        .generateApiKey(applicationNameOrId)
        .tap(apiKey => {
        config.apiKey = apiKey;
    });
}
function addProvisioningKey(config, applicationNameOrId) {
    return balena.models.application
        .generateProvisioningKey(applicationNameOrId)
        .tap(apiKey => {
        config.apiKey = apiKey;
    });
}
function addDeviceKey(config, uuid, customDeviceApiKey) {
    return Promise.try(() => {
        if (customDeviceApiKey === true) {
            return balena.models.device.generateDeviceKey(uuid);
        }
        else {
            return customDeviceApiKey;
        }
    }).tap(deviceApiKey => {
        config.deviceApiKey = deviceApiKey;
    });
}
//# sourceMappingURL=config.js.map