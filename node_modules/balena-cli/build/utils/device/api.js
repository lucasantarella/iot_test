"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Bluebird = require("bluebird");
const request = require("request");
const ApiErrors = require("./errors");
const deviceEndpoints = {
    setTargetState: 'v2/local/target-state',
    getTargetState: 'v2/local/target-state',
    getDeviceInformation: 'v2/local/device-info',
    logs: 'v2/local/logs',
    ping: 'ping',
    version: 'v2/version',
};
class DeviceAPI {
    constructor(logger, addr, port = 48484) {
        this.logger = logger;
        this.deviceAddress = `http://${addr}:${port}/`;
    }
    setTargetState(state) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = this.getUrlForAction('setTargetState');
            return DeviceAPI.promisifiedRequest(request.post, {
                url,
                json: true,
                body: state,
            }, this.logger);
        });
    }
    getTargetState() {
        return __awaiter(this, void 0, void 0, function* () {
            const url = this.getUrlForAction('getTargetState');
            return DeviceAPI.promisifiedRequest(request.get, {
                url,
                json: true,
            }, this.logger).then(body => {
                return body.state;
            });
        });
    }
    getDeviceInformation() {
        return __awaiter(this, void 0, void 0, function* () {
            const url = this.getUrlForAction('getDeviceInformation');
            return DeviceAPI.promisifiedRequest(request.get, {
                url,
                json: true,
            }, this.logger).then(body => {
                return body.info;
            });
        });
    }
    ping() {
        return __awaiter(this, void 0, void 0, function* () {
            const url = this.getUrlForAction('ping');
            return DeviceAPI.promisifiedRequest(request.get, {
                url,
            }, this.logger);
        });
    }
    getVersion() {
        const url = this.getUrlForAction('version');
        return DeviceAPI.promisifiedRequest(request.get, {
            url,
            json: true,
        }).then(body => {
            if (body.status !== 'success') {
                throw new ApiErrors.DeviceAPIError('Non-successful response from supervisor version endpoint');
            }
            return body.version;
        });
    }
    getLogStream() {
        const url = this.getUrlForAction('logs');
        return new Bluebird((resolve, reject) => {
            const req = request.get(url);
            req.on('error', reject).on('response', res => {
                if (res.statusCode !== 200) {
                    reject(new ApiErrors.DeviceAPIError('Non-200 response from log streaming endpoint'));
                }
                resolve(res);
            });
        });
    }
    getUrlForAction(action) {
        return `${this.deviceAddress}${deviceEndpoints[action]}`;
    }
    static promisifiedRequest(requestMethod, opts, logger) {
        return __awaiter(this, void 0, void 0, function* () {
            const Bluebird = yield Promise.resolve().then(() => require('bluebird'));
            const _ = yield Promise.resolve().then(() => require('lodash'));
            if (logger != null) {
                let url = null;
                if (_.isObject(opts) && opts.url != null) {
                    url = opts.url;
                }
                else if (_.isString(opts)) {
                    url = opts;
                }
                if (url != null) {
                    logger.logDebug(`Sending request to ${url}`);
                }
            }
            return Bluebird.fromCallback(cb => {
                return requestMethod(opts, cb);
            }, { multiArgs: true }).then(([response, body]) => {
                switch (response.statusCode) {
                    case 200:
                        return body;
                    case 400:
                        throw new ApiErrors.BadRequestDeviceAPIError(body.message);
                    case 503:
                        throw new ApiErrors.ServiceUnavailableAPIError(body.message);
                    default:
                        throw new ApiErrors.DeviceAPIError(body.message);
                }
            });
        });
    }
}
exports.DeviceAPI = DeviceAPI;
exports.default = DeviceAPI;
//# sourceMappingURL=api.js.map