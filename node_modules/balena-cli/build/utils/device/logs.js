"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Bluebird = require("bluebird");
const chalk_1 = require("chalk");
const ColorHash = require("color-hash");
const _ = require("lodash");
function displayDeviceLogs(logs, logger) {
    return new Bluebird((resolve, reject) => {
        logs.on('data', log => {
            displayLogLine(log, logger);
        });
        logs.on('error', reject);
        logs.on('end', resolve);
    });
}
exports.displayDeviceLogs = displayDeviceLogs;
function displayBuildLog(log, logger) {
    const toPrint = `${getServiceColourFn(log.serviceName)(`[${log.serviceName}]`)} ${log.message}`;
    logger.logBuild(toPrint);
}
exports.displayBuildLog = displayBuildLog;
function displayLogLine(log, logger) {
    try {
        const obj = JSON.parse(log.toString());
        let toPrint;
        if (obj.timestamp != null) {
            toPrint = `[${new Date(obj.timestamp).toLocaleString()}]`;
        }
        else {
            toPrint = `[${new Date().toLocaleString()}]`;
        }
        if (obj.serviceName != null) {
            const colourFn = getServiceColourFn(obj.serviceName);
            toPrint += ` ${colourFn(`[${obj.serviceName}]`)}`;
        }
        toPrint += ` ${obj.message}`;
        logger.logLogs(toPrint);
    }
    catch (e) {
        logger.logDebug(`Dropping device log due to failed parsing: ${e}`);
    }
}
const getServiceColourFn = _.memoize(_getServiceColourFn);
const colorHash = new ColorHash();
function _getServiceColourFn(serviceName) {
    const [r, g, b] = colorHash.rgb(serviceName);
    return chalk_1.default.rgb(r, g, b);
}
//# sourceMappingURL=logs.js.map