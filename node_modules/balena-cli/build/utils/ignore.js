"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
const mz_1 = require("mz");
const path = require("path");
const dockerIgnore = require("@zeit/dockerignore");
const ignore_1 = require("ignore");
var IgnoreFileType;
(function (IgnoreFileType) {
    IgnoreFileType[IgnoreFileType["DockerIgnore"] = 0] = "DockerIgnore";
    IgnoreFileType[IgnoreFileType["GitIgnore"] = 1] = "GitIgnore";
})(IgnoreFileType = exports.IgnoreFileType || (exports.IgnoreFileType = {}));
class FileIgnorer {
    constructor(basePath) {
        this.basePath = basePath;
        this.filter = (filename) => {
            const relFile = path.relative(this.basePath, filename);
            const baseDir = path.dirname(relFile).split(path.sep)[0];
            if (baseDir === '.balena' || baseDir === '.resin') {
                return true;
            }
            const dockerIgnoreHandle = dockerIgnore();
            const gitIgnoreHandle = ignore_1.default();
            const ignoreTypes = [
                { handle: dockerIgnoreHandle, entries: this.dockerIgnoreEntries },
                { handle: gitIgnoreHandle, entries: this.gitIgnoreEntries },
            ];
            _.each(ignoreTypes, ({ handle, entries }) => {
                _.each(entries, ({ pattern, filePath }) => {
                    if (FileIgnorer.contains(path.posix.dirname(filePath), filename)) {
                        handle.add(pattern);
                    }
                });
            });
            return !_.some(ignoreTypes, ({ handle }) => handle.ignores(relFile));
        };
        this.dockerIgnoreEntries = [];
        this.gitIgnoreEntries = [];
    }
    getIgnoreFileType(relativePath) {
        for (const { pattern, type, allowSubdirs } of FileIgnorer.ignoreFiles) {
            if (path.basename(relativePath) === pattern &&
                (allowSubdirs || path.dirname(relativePath) === '.')) {
                return type;
            }
        }
        return null;
    }
    addIgnoreFile(fullPath, type) {
        return __awaiter(this, void 0, void 0, function* () {
            const contents = yield mz_1.fs.readFile(fullPath, 'utf8');
            contents.split('\n').forEach(line => {
                if (/\s*#/.test(line) || _.isEmpty(line)) {
                    return;
                }
                this.addEntry(line, fullPath, type);
            });
            return;
        });
    }
    addEntry(pattern, filePath, type) {
        const entry = { pattern, filePath };
        switch (type) {
            case IgnoreFileType.DockerIgnore:
                this.dockerIgnoreEntries.push(entry);
                break;
            case IgnoreFileType.GitIgnore:
                this.gitIgnoreEntries.push(entry);
                break;
        }
    }
    static contains(path1, path2) {
        path1 = path.posix.normalize(path1);
        path2 = path.posix.normalize(path2);
        return !/^\.\.\//.test(path.posix.relative(path1, path2));
    }
}
FileIgnorer.ignoreFiles = [
    {
        pattern: '.gitignore',
        type: IgnoreFileType.GitIgnore,
        allowSubdirs: true,
    },
    {
        pattern: '.dockerignore',
        type: IgnoreFileType.DockerIgnore,
        allowSubdirs: false,
    },
];
exports.FileIgnorer = FileIgnorer;
//# sourceMappingURL=ignore.js.map