// Generated by CoffeeScript 1.12.7
var Promise, QEMU_BIN_NAME, QEMU_VERSION, balenaArchToQemuArch, getQemuPath, hasQemu, installQemu, platformNeedsQemu;

Promise = require('bluebird');

exports.QEMU_VERSION = QEMU_VERSION = 'v3.0.0+resin';

exports.QEMU_BIN_NAME = QEMU_BIN_NAME = 'qemu-execve';

exports.installQemuIfNeeded = Promise.method(function(emulated, logger, arch) {
  if (!(emulated && platformNeedsQemu())) {
    return false;
  }
  return hasQemu(arch).then(function(present) {
    if (!present) {
      logger.logInfo("Installing qemu for " + arch + " emulation...");
      return installQemu(arch);
    }
  })["return"](true);
});

exports.qemuPathInContext = function(context) {
  var binDir, binPath, path;
  path = require('path');
  binDir = path.join(context, '.balena');
  binPath = path.join(binDir, QEMU_BIN_NAME);
  return path.relative(context, binPath);
};

exports.copyQemu = function(context, arch) {
  var binDir, binPath, fs, path;
  path = require('path');
  fs = require('mz/fs');
  binDir = path.join(context, '.balena');
  binPath = path.join(binDir, QEMU_BIN_NAME);
  return Promise.resolve(fs.mkdir(binDir))["catch"]({
    code: 'EEXIST'
  }, function() {}).then(function() {
    return getQemuPath(arch);
  }).then(function(qemu) {
    return new Promise(function(resolve, reject) {
      var read, write;
      read = fs.createReadStream(qemu);
      write = fs.createWriteStream(binPath);
      return read.on('error', reject).pipe(write).on('error', reject).on('finish', resolve);
    });
  }).then(function() {
    return fs.chmod(binPath, '755');
  }).then(function() {
    return path.relative(context, binPath);
  });
};

hasQemu = function(arch) {
  var fs;
  fs = require('mz/fs');
  return getQemuPath(arch).then(fs.stat)["return"](true).catchReturn(false);
};

getQemuPath = function(arch) {
  var balena, fs, path;
  balena = require('balena-sdk').fromSharedOptions();
  path = require('path');
  fs = require('mz/fs');
  return balena.settings.get('binDirectory').then(function(binDir) {
    return Promise.resolve(fs.mkdir(binDir))["catch"]({
      code: 'EEXIST'
    }, function() {}).then(function() {
      return path.join(binDir, QEMU_BIN_NAME + "-" + arch);
    });
  });
};

platformNeedsQemu = function() {
  var os;
  os = require('os');
  return os.platform() === 'linux';
};

installQemu = function(arch) {
  var fs, request, tar, zlib;
  request = require('request');
  fs = require('fs');
  zlib = require('zlib');
  tar = require('tar-stream');
  return getQemuPath(arch).then(function(qemuPath) {
    return new Promise(function(resolve, reject) {
      var downloadArchiveName, extract, installStream, qemuArch, qemuUrl;
      installStream = fs.createWriteStream(qemuPath);
      qemuArch = balenaArchToQemuArch(arch);
      downloadArchiveName = "qemu-3.0.0+resin-" + qemuArch + ".tar.gz";
      qemuUrl = "https://github.com/balena-io/qemu/releases/download/" + QEMU_VERSION + "/" + downloadArchiveName;
      extract = tar.extract();
      extract.on('entry', function(header, stream, next) {
        stream.on('end', next);
        if (header.name.includes("qemu-" + qemuArch + "-static")) {
          return stream.pipe(installStream);
        } else {
          return stream.resume();
        }
      });
      return request(qemuUrl).on('error', reject).pipe(zlib.createGunzip()).on('error', reject).pipe(extract).on('error', reject).on('finish', function() {
        fs.chmodSync(qemuPath, '755');
        return resolve();
      });
    });
  });
};

balenaArchToQemuArch = function(arch) {
  switch (arch) {
    case 'armv7hf':
    case 'rpi':
    case 'armhf':
      return 'arm';
    case 'aarch64':
      return 'aarch64';
    default:
      throw new Error("Cannot install emulator for architecture " + arch);
  }
};
