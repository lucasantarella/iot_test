"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const JSONStream = require("JSONStream");
const request = require("request");
const typed_error_1 = require("typed-error");
const compose_1 = require("./compose");
const DEBUG_MODE = !!process.env.DEBUG;
const CURSOR_METADATA_REGEX = /([a-z]+)([0-9]+)?/;
const TRIM_REGEX = /\n+$/;
class RemoteBuildFailedError extends typed_error_1.TypedError {
    constructor(message = 'Remote build failed') {
        super(message);
    }
}
exports.RemoteBuildFailedError = RemoteBuildFailedError;
function getBuilderEndpoint(baseUrl, owner, app, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const querystring = yield Promise.resolve().then(() => require('querystring'));
        const args = querystring.stringify({
            owner,
            app,
            emulated: opts.emulated,
            nocache: opts.nocache,
        });
        return `https://builder.${baseUrl}/v3/build?${args}`;
    });
}
function startRemoteBuild(build) {
    return __awaiter(this, void 0, void 0, function* () {
        const Bluebird = yield Promise.resolve().then(() => require('bluebird'));
        const stream = yield getRequestStream(build);
        if (process.platform === 'win32') {
            const readline = (yield Promise.resolve().then(() => require('readline'))).createInterface({
                input: process.stdin,
                output: process.stdout,
            });
            readline.on('SIGINT', () => process.emit('SIGINT'));
        }
        return new Bluebird((resolve, reject) => {
            process.removeAllListeners('SIGINT');
            process.on('SIGINT', () => {
                process.stderr.write('Received SIGINT, cleaning up. Please wait.\n');
                cancelBuildIfNecessary(build).then(() => {
                    stream.end();
                    process.exit(130);
                });
            });
            stream.on('data', getBuilderMessageHandler(build));
            stream.on('end', resolve);
            stream.on('error', reject);
        }).then(() => {
            if (build.hadError) {
                throw new RemoteBuildFailedError();
            }
        });
    });
}
exports.startRemoteBuild = startRemoteBuild;
function handleBuilderMetadata(obj, build) {
    return __awaiter(this, void 0, void 0, function* () {
        const { stripIndent } = yield Promise.resolve().then(() => require('common-tags'));
        switch (obj.resource) {
            case 'cursor':
                const readline = yield Promise.resolve().then(() => require('readline'));
                if (obj.value == null) {
                    return;
                }
                const match = obj.value.match(CURSOR_METADATA_REGEX);
                if (!match) {
                    console.log(stripIndent `
					Warning: ignoring unknown builder command. You may experience
					odd build output. Maybe you need to update balena-cli?`);
                    return;
                }
                const value = match[1];
                const amount = match[2] || 1;
                switch (value) {
                    case 'erase':
                        readline.clearLine(process.stdout, 0);
                        process.stdout.write('\r');
                        break;
                    case 'up':
                        readline.moveCursor(process.stdout, 0, -amount);
                        break;
                    case 'down':
                        readline.moveCursor(process.stdout, 0, amount);
                        break;
                }
                break;
            case 'buildLogId':
                build.releaseId = parseInt(obj.value, 10);
                break;
        }
    });
}
function getBuilderMessageHandler(build) {
    return (obj) => __awaiter(this, void 0, void 0, function* () {
        if (DEBUG_MODE) {
            console.log(`[debug] handling message: ${JSON.stringify(obj)}`);
        }
        if (obj.type != null && obj.type === 'metadata') {
            return handleBuilderMetadata(obj, build);
        }
        if (obj.message) {
            const readline = yield Promise.resolve().then(() => require('readline'));
            readline.clearLine(process.stdout, 0);
            const message = obj.message.replace(TRIM_REGEX, '');
            if (obj.replace) {
                process.stdout.write(`\r${message}`);
            }
            else {
                process.stdout.write(`\r${message}\n`);
            }
        }
        if (obj.isError) {
            build.hadError = true;
        }
    });
}
function cancelBuildIfNecessary(build) {
    return __awaiter(this, void 0, void 0, function* () {
        if (build.releaseId != null) {
            yield build.sdk.pine.patch({
                resource: 'release',
                id: build.releaseId,
                body: {
                    status: 'cancelled',
                    end_timestamp: Date.now(),
                },
            });
        }
    });
}
function getTarStreamCallbackForRegistrySecrets(registrySecrets) {
    if (Object.keys(registrySecrets).length > 0) {
        return (pack) => {
            pack.entry({ name: '.balena/registry-secrets.json' }, JSON.stringify(registrySecrets));
        };
    }
}
function getRequestStream(build) {
    return __awaiter(this, void 0, void 0, function* () {
        const path = yield Promise.resolve().then(() => require('path'));
        const visuals = yield Promise.resolve().then(() => require('resin-cli-visuals'));
        const zlib = yield Promise.resolve().then(() => require('zlib'));
        const tarSpinner = new visuals.Spinner('Packaging the project source...');
        tarSpinner.start();
        const tarStream = yield compose_1.tarDirectory(path.resolve(build.source), getTarStreamCallbackForRegistrySecrets(build.opts.registrySecrets));
        tarSpinner.stop();
        const url = yield getBuilderEndpoint(build.baseUrl, build.owner, build.app, build.opts);
        if (DEBUG_MODE) {
            console.log(`[debug] Connecting to builder at ${url}`);
        }
        const post = request.post({
            url,
            auth: {
                bearer: build.auth,
            },
            headers: {
                'Content-Encoding': 'gzip',
            },
            body: tarStream.pipe(zlib.createGzip({
                level: 6,
            })),
        });
        const uploadSpinner = new visuals.Spinner('Uploading source package to balena cloud');
        uploadSpinner.start();
        const parseStream = post.pipe(JSONStream.parse('*'));
        parseStream.on('data', () => uploadSpinner.stop());
        return parseStream;
    });
}
//# sourceMappingURL=remote-build.js.map