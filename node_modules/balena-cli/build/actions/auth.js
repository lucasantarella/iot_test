// Generated by CoffeeScript 1.12.7

/*
Copyright 2016-2017 Balena

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */
exports.login = {
  signature: 'login',
  description: 'login to balena',
  help: 'Use this command to login to your balena account.\n\nThis command will prompt you to login using the following login types:\n\n- Web authorization: open your web browser and prompt you to authorize the CLI\nfrom the dashboard.\n\n- Credentials: using email/password and 2FA.\n\n- Token: using a session token or API key from the preferences page.\n\nExamples:\n\n	$ balena login\n	$ balena login --web\n	$ balena login --token "..."\n	$ balena login --credentials\n	$ balena login --credentials --email johndoe@gmail.com --password secret',
  options: [
    {
      signature: 'token',
      description: 'session token or API key',
      parameter: 'token',
      alias: 't'
    }, {
      signature: 'web',
      description: 'web-based login',
      boolean: true,
      alias: 'w'
    }, {
      signature: 'credentials',
      description: 'credential-based login',
      boolean: true,
      alias: 'c'
    }, {
      signature: 'email',
      parameter: 'email',
      description: 'email',
      alias: ['e', 'u']
    }, {
      signature: 'password',
      parameter: 'password',
      description: 'password',
      alias: 'p'
    }
  ],
  primary: true,
  action: function(params, options, done) {
    var Promise, _, auth, balena, form, login, messages, patterns;
    _ = require('lodash');
    Promise = require('bluebird');
    balena = require('balena-sdk').fromSharedOptions();
    auth = require('../auth');
    form = require('resin-cli-form');
    patterns = require('../utils/patterns');
    messages = require('../utils/messages');
    login = function(options) {
      if (options.token != null) {
        return Promise["try"](function() {
          if (_.isString(options.token)) {
            return options.token;
          }
          return form.ask({
            message: 'Session token or API key from the preferences page',
            name: 'token',
            type: 'input'
          });
        }).then(balena.auth.loginWithToken).tap(function() {
          return balena.auth.whoami().then(function(username) {
            if (!username) {
              return patterns.exitWithExpectedError('Token authentication failed');
            }
          });
        });
      } else if (options.credentials) {
        return patterns.authenticate(options);
      } else if (options.web) {
        console.info('Connecting to the web dashboard');
        return auth.login();
      }
      return patterns.askLoginType().then(function(loginType) {
        var runCommand;
        if (loginType === 'register') {
          runCommand = require('../utils/helpers').runCommand;
          return runCommand('signup');
        }
        options[loginType] = true;
        return login(options);
      });
    };
    return balena.settings.get('balenaUrl').then(function(balenaUrl) {
      console.log(messages.balenaAsciiArt);
      console.log("\nLogging in to " + balenaUrl);
      return login(options);
    }).then(balena.auth.whoami).tap(function(username) {
      console.info("Successfully logged in as: " + username);
      return console.info("\nFind out about the available commands by running:\n\n  $ balena help\n\n" + messages.reachingOut);
    }).nodeify(done);
  }
};

exports.logout = {
  signature: 'logout',
  description: 'logout from balena',
  help: 'Use this command to logout from your balena account.o\n\nExamples:\n\n	$ balena logout',
  action: function(params, options, done) {
    var balena;
    balena = require('balena-sdk').fromSharedOptions();
    return balena.auth.logout().nodeify(done);
  }
};

exports.signup = {
  signature: 'signup',
  description: 'signup to balena',
  help: 'Use this command to signup for a balena account.\n\nIf signup is successful, you\'ll be logged in to your new user automatically.\n\nExamples:\n\n	$ balena signup\n	Email: johndoe@acme.com\n	Password: ***********\n\n	$ balena whoami\n	johndoe',
  action: function(params, options, done) {
    var balena, form, validation;
    balena = require('balena-sdk').fromSharedOptions();
    form = require('resin-cli-form');
    validation = require('../utils/validation');
    return balena.settings.get('balenaUrl').then(function(balenaUrl) {
      console.log("\nRegistering to " + balenaUrl);
      return form.run([
        {
          message: 'Email:',
          name: 'email',
          type: 'input',
          validate: validation.validateEmail
        }, {
          message: 'Password:',
          name: 'password',
          type: 'password',
          validate: validation.validatePassword
        }
      ]);
    }).then(balena.auth.register).then(balena.auth.loginWithToken).nodeify(done);
  }
};

exports.whoami = {
  signature: 'whoami',
  description: 'get current username and email address',
  help: 'Use this command to find out the current logged in username and email address.\n\nExamples:\n\n	$ balena whoami',
  permission: 'user',
  action: function(params, options, done) {
    var Promise, balena, visuals;
    Promise = require('bluebird');
    balena = require('balena-sdk').fromSharedOptions();
    visuals = require('resin-cli-visuals');
    return Promise.props({
      username: balena.auth.whoami(),
      email: balena.auth.getEmail(),
      url: balena.settings.get('balenaUrl')
    }).then(function(results) {
      return console.log(visuals.table.vertical(results, ['$account information$', 'username', 'email', 'url']));
    }).nodeify(done);
  }
};
