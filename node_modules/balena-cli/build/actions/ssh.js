// Generated by CoffeeScript 1.12.7

/*
Copyright 2016-2017 Balena

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */
var commandOptions, normalizeUuidProp;

commandOptions = require('./command-options');

normalizeUuidProp = require('../utils/normalization').normalizeUuidProp;

module.exports = {
  signature: 'ssh [uuid]',
  description: '(beta) get a shell into the running app container of a device',
  help: 'Warning: \'balena ssh\' requires an openssh-compatible client to be correctly\ninstalled in your shell environment. For more information (including Windows\nsupport) please check the README here: https://github.com/balena-io/balena-cli\n\nUse this command to get a shell into the running application container of\nyour device.\n\nExamples:\n\n	$ balena ssh MyApp\n	$ balena ssh 7cf02a6\n	$ balena ssh 7cf02a6 --port 8080\n	$ balena ssh 7cf02a6 -v\n	$ balena ssh 7cf02a6 -s',
  permission: 'user',
  primary: true,
  options: [
    {
      signature: 'port',
      parameter: 'port',
      description: 'ssh gateway port',
      alias: 'p'
    }, {
      signature: 'verbose',
      boolean: true,
      description: 'increase verbosity',
      alias: 'v'
    }, commandOptions.hostOSAccess, {
      signature: 'noproxy',
      boolean: true,
      description: "don't use the proxy configuration for this connection. Only makes sense if you've configured proxy globally."
    }
  ],
  action: function(params, options, done) {
    var Promise, _, balena, bash, child_process, getSshProxyCommand, getSubShellCommand, hasbin, patterns, proxyConfig, useProxy, verbose;
    normalizeUuidProp(params);
    child_process = require('child_process');
    Promise = require('bluebird');
    balena = require('balena-sdk').fromSharedOptions();
    _ = require('lodash');
    bash = require('bash');
    hasbin = require('hasbin');
    getSubShellCommand = require('../utils/helpers').getSubShellCommand;
    patterns = require('../utils/patterns');
    if (options.port == null) {
      options.port = 22;
    }
    verbose = options.verbose ? '-vvv' : '';
    proxyConfig = global.PROXY_CONFIG;
    useProxy = !!proxyConfig && !options.noproxy;
    getSshProxyCommand = function(hasTunnelBin) {
      var i, proxyAuth, proxyCommand, tunnelOptions;
      if (!useProxy) {
        return '';
      }
      if (!hasTunnelBin) {
        console.warn('Proxy is enabled but the `proxytunnel` binary cannot be found.\nPlease install it if you want to route the `balena ssh` requests through the proxy.\nAlternatively you can pass `--noproxy` param to the `balena ssh` command to ignore the proxy config\nfor the `ssh` requests.\n\nAttemmpting the unproxied request for now.');
        return '';
      }
      tunnelOptions = {
        proxy: proxyConfig.host + ":" + proxyConfig.port,
        dest: '%h:%p'
      };
      proxyAuth = proxyConfig.proxyAuth;
      if (proxyAuth) {
        i = proxyAuth.indexOf(':');
        _.assign(tunnelOptions, {
          user: proxyAuth.substring(0, i),
          pass: proxyAuth.substring(i + 1)
        });
      }
      proxyCommand = "proxytunnel " + (bash.args(tunnelOptions, '--', '='));
      return "-o " + (bash.args({
        ProxyCommand: proxyCommand
      }, '', '='));
    };
    return Promise["try"](function() {
      if (!params.uuid) {
        return false;
      }
      return balena.models.device.has(params.uuid);
    }).then(function(uuidExists) {
      if (uuidExists) {
        return params.uuid;
      }
      return patterns.inferOrSelectDevice();
    }).then(function(uuid) {
      console.info("Connecting to: " + uuid);
      return balena.models.device.get(uuid);
    }).then(function(device) {
      if (!device.is_online) {
        patterns.exitWithExpectedError('Device is not online');
      }
      return Promise.props({
        username: balena.auth.whoami(),
        uuid: device.uuid,
        containerId: options.host ? '' : balena.models.device.getApplicationInfo(device.uuid).get('containerId'),
        proxyUrl: balena.settings.get('proxyUrl'),
        hasTunnelBin: useProxy ? hasbin('proxytunnel') : null
      }).then(function(arg) {
        var containerId, hasTunnelBin, proxyUrl, username, uuid;
        username = arg.username, uuid = arg.uuid, containerId = arg.containerId, proxyUrl = arg.proxyUrl, hasTunnelBin = arg.hasTunnelBin;
        if (containerId == null) {
          throw new Error('Did not find running application container');
        }
        return Promise["try"](function() {
          var accessCommand, command, sshProxyCommand, subShellCommand;
          sshProxyCommand = getSshProxyCommand(hasTunnelBin);
          if (options.host) {
            accessCommand = "host " + uuid;
          } else {
            accessCommand = "enter " + uuid + " " + containerId;
          }
          command = "ssh " + verbose + " -t -o LogLevel=ERROR -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null " + sshProxyCommand + " -p " + options.port + " " + username + "@ssh." + proxyUrl + " " + accessCommand;
          subShellCommand = getSubShellCommand(command);
          return child_process.spawn(subShellCommand.program, subShellCommand.args, {
            stdio: 'inherit'
          });
        });
      });
    }).nodeify(done);
  }
};
