// Generated by CoffeeScript 1.12.7

/*
Copyright 2016-2017 Balena

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */
var commandOptions;

commandOptions = require('./command-options');

exports.list = {
  signature: 'keys',
  description: 'list all ssh keys',
  help: 'Use this command to list all your SSH keys.\n\nExamples:\n\n	$ balena keys',
  permission: 'user',
  action: function(params, options, done) {
    var balena, visuals;
    balena = require('balena-sdk').fromSharedOptions();
    visuals = require('resin-cli-visuals');
    return balena.models.key.getAll().then(function(keys) {
      return console.log(visuals.table.horizontal(keys, ['id', 'title']));
    }).nodeify(done);
  }
};

exports.info = {
  signature: 'key <id>',
  description: 'list a single ssh key',
  help: 'Use this command to show information about a single SSH key.\n\nExamples:\n\n	$ balena key 17',
  permission: 'user',
  action: function(params, options, done) {
    var balena, visuals;
    balena = require('balena-sdk').fromSharedOptions();
    visuals = require('resin-cli-visuals');
    return balena.models.key.get(params.id).then(function(key) {
      console.log(visuals.table.vertical(key, ['id', 'title']));
      return console.log('\n' + key.public_key);
    }).nodeify(done);
  }
};

exports.remove = {
  signature: 'key rm <id>',
  description: 'remove a ssh key',
  help: 'Use this command to remove a SSH key from balena.\n\nNotice this command asks for confirmation interactively.\nYou can avoid this by passing the `--yes` boolean option.\n\nExamples:\n\n	$ balena key rm 17\n	$ balena key rm 17 --yes',
  options: [commandOptions.yes],
  permission: 'user',
  action: function(params, options, done) {
    var balena, patterns;
    balena = require('balena-sdk').fromSharedOptions();
    patterns = require('../utils/patterns');
    return patterns.confirm(options.yes, 'Are you sure you want to delete the key?').then(function() {
      return balena.models.key.remove(params.id);
    }).nodeify(done);
  }
};

exports.add = {
  signature: 'key add <name> [path]',
  description: 'add a SSH key to balena',
  help: 'Use this command to associate a new SSH key with your account.\n\nIf `path` is omitted, the command will attempt\nto read the SSH key from stdin.\n\nExamples:\n\n	$ balena key add Main ~/.ssh/id_rsa.pub\n	$ cat ~/.ssh/id_rsa.pub | balena key add Main',
  permission: 'user',
  action: function(params, options, done) {
    var Promise, _, balena, capitano, readFileAsync;
    _ = require('lodash');
    Promise = require('bluebird');
    readFileAsync = Promise.promisify(require('fs').readFile);
    capitano = require('capitano');
    balena = require('balena-sdk').fromSharedOptions();
    return Promise["try"](function() {
      if (params.path != null) {
        return readFileAsync(params.path, {
          encoding: 'utf8'
        });
      }
      return Promise.fromNode(function(callback) {
        return capitano.utils.getStdin(function(data) {
          return callback(null, data);
        });
      });
    }).then(_.partial(balena.models.key.create, params.name)).nodeify(done);
  }
};
