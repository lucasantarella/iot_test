"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const commandOptions = require("./command-options");
const normalization_1 = require("../utils/normalization");
const common_tags_1 = require("common-tags");
const getReservedPrefixes = () => __awaiter(this, void 0, void 0, function* () {
    const balena = (yield Promise.resolve().then(() => require('balena-sdk'))).fromSharedOptions();
    const settings = yield balena.settings.getAll();
    const response = yield balena.request.send({
        baseUrl: settings.apiUrl,
        url: '/config/vars',
    });
    return response.body.reservedNamespaces;
});
exports.list = {
    signature: 'envs',
    description: 'list all environment variables',
    help: common_tags_1.stripIndent `
		Use this command to list all environment variables for
		a particular application or device.

		This command lists all application/device environment variables.

		If you want to see config variables, used to configure
		balena features, use the --config option.

		At the moment the CLI does not support per-service variables,
		so the following commands will only show service-wide
		environment variables.

		Example:

			$ balena envs --application MyApp
			$ balena envs --application MyApp --config
			$ balena envs --device 7cf02a6
	`,
    options: [
        commandOptions.optionalApplication,
        commandOptions.optionalDevice,
        {
            signature: 'config',
            description: 'show config variables',
            boolean: true,
            alias: ['c', 'v', 'verbose'],
        },
    ],
    permission: 'user',
    action(_params, options, done) {
        return __awaiter(this, void 0, void 0, function* () {
            normalization_1.normalizeUuidProp(options, 'device');
            const Bluebird = yield Promise.resolve().then(() => require('bluebird'));
            const _ = yield Promise.resolve().then(() => require('lodash'));
            const balena = (yield Promise.resolve().then(() => require('balena-sdk'))).fromSharedOptions();
            const visuals = yield Promise.resolve().then(() => require('resin-cli-visuals'));
            const { exitWithExpectedError } = yield Promise.resolve().then(() => require('../utils/patterns'));
            return Bluebird.try(function () {
                if (options.application) {
                    return balena.models.application[options.config ? 'configVar' : 'envVar'].getAllByApplication(options.application);
                }
                else if (options.device) {
                    return balena.models.device[options.config ? 'configVar' : 'envVar'].getAllByDevice(options.device);
                }
                else {
                    return exitWithExpectedError('You must specify an application or device');
                }
            })
                .tap(function (environmentVariables) {
                if (_.isEmpty(environmentVariables)) {
                    exitWithExpectedError('No environment variables found');
                }
                console.log(visuals.table.horizontal(environmentVariables, [
                    'id',
                    'name',
                    'value',
                ]));
            })
                .nodeify(done);
        });
    },
};
exports.remove = {
    signature: 'env rm <id>',
    description: 'remove an environment variable',
    help: common_tags_1.stripIndent `
		Use this command to remove an environment variable from an application.

		Notice this command asks for confirmation interactively.
		You can avoid this by passing the \`--yes\` boolean option.

		If you want to eliminate a device environment variable, pass the \`--device\` boolean option.

		Examples:

			$ balena env rm 215
			$ balena env rm 215 --yes
			$ balena env rm 215 --device
	`,
    options: [commandOptions.yes, commandOptions.booleanDevice],
    permission: 'user',
    action(params, options, done) {
        return __awaiter(this, void 0, void 0, function* () {
            const balena = (yield Promise.resolve().then(() => require('balena-sdk'))).fromSharedOptions();
            const patterns = yield Promise.resolve().then(() => require('../utils/patterns'));
            return patterns
                .confirm(options.yes, 'Are you sure you want to delete the environment variable?')
                .then(function () {
                if (options.device) {
                    return balena.pine.delete({
                        resource: 'device_environment_variable',
                        id: params.id,
                    });
                }
                else {
                    return balena.pine.delete({
                        resource: 'application_environment_variable',
                        id: params.id,
                    });
                }
            })
                .nodeify(done);
        });
    },
};
exports.add = {
    signature: 'env add <key> [value]',
    description: 'add an environment or config variable',
    help: common_tags_1.stripIndent `
		Use this command to add an enviroment or config variable to an application.

		At the moment the CLI doesn't fully support multi-container applications,
		so the following commands will set service-wide environment variables.

		If value is omitted, the tool will attempt to use the variable's value
		as defined in your host machine.

		Use the \`--device\` option if you want to assign the environment variable
		to a specific device.

		If the value is grabbed from the environment, a warning message will be printed.
		Use \`--quiet\` to remove it.

		Examples:

			$ balena env add EDITOR vim --application MyApp
			$ balena env add TERM --application MyApp
			$ balena env add EDITOR vim --device 7cf02a6
	`,
    options: [commandOptions.optionalApplication, commandOptions.optionalDevice],
    permission: 'user',
    action(params, options, done) {
        return __awaiter(this, void 0, void 0, function* () {
            normalization_1.normalizeUuidProp(options, 'device');
            const Bluebird = yield Promise.resolve().then(() => require('bluebird'));
            const _ = yield Promise.resolve().then(() => require('lodash'));
            const balena = (yield Promise.resolve().then(() => require('balena-sdk'))).fromSharedOptions();
            const { exitWithExpectedError } = yield Promise.resolve().then(() => require('../utils/patterns'));
            return Bluebird.try(function () {
                return __awaiter(this, void 0, void 0, function* () {
                    if (params.value == null) {
                        params.value = process.env[params.key];
                        if (params.value == null) {
                            throw new Error(`Environment value not found for key: ${params.key}`);
                        }
                        else {
                            console.info(`Warning: using ${params.key}=${params.value} from host environment`);
                        }
                    }
                    const reservedPrefixes = yield getReservedPrefixes();
                    const isConfigVar = _.some(reservedPrefixes, prefix => _.startsWith(params.key, prefix));
                    if (options.application) {
                        return balena.models.application[isConfigVar ? 'configVar' : 'envVar'].set(options.application, params.key, params.value);
                    }
                    else if (options.device) {
                        return balena.models.device[isConfigVar ? 'configVar' : 'envVar'].set(options.device, params.key, params.value);
                    }
                    else {
                        exitWithExpectedError('You must specify an application or device');
                    }
                });
            }).nodeify(done);
        });
    },
};
exports.rename = {
    signature: 'env rename <id> <value>',
    description: 'rename an environment variable',
    help: common_tags_1.stripIndent `
		Use this command to change the value of an enviroment variable.

		Pass the \`--device\` boolean option if you want to rename a device environment variable.

		Examples:

			$ balena env rename 376 emacs
			$ balena env rename 376 emacs --device
	`,
    permission: 'user',
    options: [commandOptions.booleanDevice],
    action(params, options, done) {
        return __awaiter(this, void 0, void 0, function* () {
            const Bluebird = yield Promise.resolve().then(() => require('bluebird'));
            const balena = (yield Promise.resolve().then(() => require('balena-sdk'))).fromSharedOptions();
            return Bluebird.try(function () {
                if (options.device) {
                    return balena.pine.patch({
                        resource: 'device_environment_variable',
                        id: params.id,
                        body: {
                            value: params.value,
                        },
                    });
                }
                else {
                    return balena.pine.patch({
                        resource: 'application_environment_variable',
                        id: params.id,
                        body: {
                            value: params.value,
                        },
                    });
                }
            }).nodeify(done);
        });
    },
};
//# sourceMappingURL=environment-variables.js.map