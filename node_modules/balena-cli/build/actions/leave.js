"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Bluebird = require("bluebird");
const common_tags_1 = require("common-tags");
exports.leave = {
    signature: 'leave [deviceIp]',
    description: 'Detach a local device from its balena application',
    help: common_tags_1.stripIndent `
		Use this command to make a local device leave the balena server it is
		provisioned on. This effectively makes the device "unmanaged".

		The device entry on the server is preserved after running this command,
		so the device can subsequently re-join the server if needed.

		If you don't specify a device hostname or IP, this command will automatically
		scan the local network for balenaOS devices and prompt you to select one
		from an interactive picker. This usually requires root privileges.

		Examples:

			$ balena leave
			$ balena leave balena.local
			$ balena leave 192.168.1.25
	`,
    options: [],
    permission: 'user',
    primary: true,
    action(params, _options, done) {
        return __awaiter(this, void 0, void 0, function* () {
            const balena = yield Promise.resolve().then(() => require('balena-sdk'));
            const Logger = yield Promise.resolve().then(() => require('../utils/logger'));
            const promote = yield Promise.resolve().then(() => require('../utils/promote'));
            const sdk = balena.fromSharedOptions();
            const logger = new Logger();
            return Bluebird.try(() => {
                return promote.leave(logger, sdk, params.deviceIp);
            }).nodeify(done);
        });
    },
};
//# sourceMappingURL=leave.js.map