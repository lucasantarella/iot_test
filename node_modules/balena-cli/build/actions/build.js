// Generated by CoffeeScript 1.12.7
var Promise, buildProject, compose, dockerUtils;

Promise = require('bluebird');

dockerUtils = require('../utils/docker');

compose = require('../utils/compose');


/*
Opts must be an object with the following keys:

	app: the app this build is for (optional)
	arch: the architecture to build for
	deviceType: the device type to build for
	buildEmulated
	buildOpts: arguments to forward to docker build command
 */

buildProject = function(docker, logger, composeOpts, opts) {
  return compose.loadProject(logger, composeOpts.projectPath, composeOpts.projectName).then(function(project) {
    var appType, ref, ref1;
    appType = (ref = opts.app) != null ? (ref1 = ref.application_type) != null ? ref1[0] : void 0 : void 0;
    if ((appType != null) && project.descriptors.length > 1 && !appType.supports_multicontainer) {
      logger.logWarn('Target application does not support multiple containers.\n' + 'Continuing with build, but you will not be able to deploy.');
    }
    return compose.buildProject(docker, logger, project.path, project.name, project.composition, opts.arch, opts.deviceType, opts.buildEmulated, opts.buildOpts, composeOpts.inlineLogs);
  }).then(function() {
    return logger.logSuccess('Build succeeded!');
  }).tapCatch(function(e) {
    return logger.logError('Build failed');
  });
};

module.exports = {
  signature: 'build [source]',
  description: 'Build a single image or a multicontainer project locally',
  primary: true,
  help: 'Use this command to build an image or a complete multicontainer project\nwith the provided docker daemon.\n\nYou must provide either an application or a device-type/architecture\npair to use the balena Dockerfile pre-processor\n(e.g. Dockerfile.template -> Dockerfile).\n\nThis command will look into the given source directory (or the current working\ndirectory if one isn\'t specified) for a compose file. If one is found, this\ncommand will build each service defined in the compose file. If a compose file\nisn\'t found, the command will look for a Dockerfile, and if yet that isn\'t found,\nit will try to generate one.\n\nExamples:\n\n	$ balena build\n	$ balena build ./source/\n	$ balena build --deviceType raspberrypi3 --arch armv7hf --emulated\n	$ balena build --application MyApp ./source/\n	$ balena build --docker \'/var/run/docker.sock\'\n	$ balena build --dockerHost my.docker.host --dockerPort 2376 --ca ca.pem --key key.pem --cert cert.pem',
  options: dockerUtils.appendOptions(compose.appendOptions([
    {
      signature: 'arch',
      parameter: 'arch',
      description: 'The architecture to build for',
      alias: 'A'
    }, {
      signature: 'deviceType',
      parameter: 'deviceType',
      description: 'The type of device this build is for',
      alias: 'd'
    }, {
      signature: 'application',
      parameter: 'application',
      description: 'The target balena application this build is for',
      alias: 'a'
    }
  ])),
  action: function(params, options, done) {
    var Logger, exitWithExpectedError, helpers, logger;
    require('events').defaultMaxListeners = 1000;
    exitWithExpectedError = require('../utils/patterns').exitWithExpectedError;
    helpers = require('../utils/helpers');
    Logger = require('../utils/logger');
    logger = new Logger();
    logger.logDebug('Parsing input...');
    return Promise["try"](function() {
      var application, arch, deviceType;
      if (options.source == null) {
        options.source = params.source;
      }
      delete params.source;
      application = options.application, arch = options.arch, deviceType = options.deviceType;
      if ((!((arch != null) && (deviceType != null)) && (application == null)) || ((application != null) && ((arch != null) || (deviceType != null)))) {
        exitWithExpectedError('You must specify either an application or an arch/deviceType pair to build for');
      }
      if ((arch != null) && (deviceType != null)) {
        return [void 0, arch, deviceType];
      } else {
        return Promise.join(helpers.getApplication(application), helpers.getArchAndDeviceType(application), function(app, arg) {
          var arch, device_type;
          arch = arg.arch, device_type = arg.device_type;
          app.arch = arch;
          app.device_type = device_type;
          return app;
        }).then(function(app) {
          return [app, app.arch, app.device_type];
        });
      }
    }).then(function(arg) {
      var app, arch, deviceType;
      app = arg[0], arch = arg[1], deviceType = arg[2];
      return Promise.join(dockerUtils.getDocker(options), dockerUtils.generateBuildOpts(options), compose.generateOpts(options), function(docker, buildOpts, composeOpts) {
        return buildProject(docker, logger, composeOpts, {
          app: app,
          arch: arch,
          deviceType: deviceType,
          buildEmulated: !!options.emulated,
          buildOpts: buildOpts
        });
      });
    }).asCallback(done);
  }
};
