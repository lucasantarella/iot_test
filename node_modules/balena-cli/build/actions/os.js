// Generated by CoffeeScript 1.12.7

/*
Copyright 2016-2017 Balena

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */
var INIT_WARNING_MESSAGE, _, buildConfig, buildConfigForDeviceType, commandOptions, formatVersion, normalizeUuidProp, resolveVersion;

commandOptions = require('./command-options');

_ = require('lodash');

normalizeUuidProp = require('../utils/normalization').normalizeUuidProp;

formatVersion = function(v, isRecommended) {
  var result;
  result = "v" + v;
  if (isRecommended) {
    result += ' (recommended)';
  }
  return result;
};

resolveVersion = function(deviceType, version) {
  var balena, form;
  if (version !== 'menu') {
    if (version[0] === 'v') {
      version = version.slice(1);
    }
    return Promise.resolve(version);
  }
  form = require('resin-cli-form');
  balena = require('balena-sdk').fromSharedOptions();
  return balena.models.os.getSupportedVersions(deviceType).then(function(arg) {
    var choices, recommended, versions;
    versions = arg.versions, recommended = arg.recommended;
    choices = versions.map(function(v) {
      return {
        value: v,
        name: formatVersion(v, v === recommended)
      };
    });
    return form.ask({
      message: 'Select the OS version:',
      type: 'list',
      choices: choices,
      "default": recommended
    });
  });
};

exports.versions = {
  signature: 'os versions <type>',
  description: 'show the available balenaOS versions for the given device type',
  help: 'Use this command to show the available balenaOS versions for a certain device type.\nCheck available types with `balena devices supported`\n\nExample:\n\n	$ balena os versions raspberrypi3',
  action: function(params, options, done) {
    var balena;
    balena = require('balena-sdk').fromSharedOptions();
    return balena.models.os.getSupportedVersions(params.type).then(function(arg) {
      var recommended, versions;
      versions = arg.versions, recommended = arg.recommended;
      return versions.forEach(function(v) {
        return console.log(formatVersion(v, v === recommended));
      });
    });
  }
};

exports.download = {
  signature: 'os download <type>',
  description: 'download an unconfigured os image',
  help: 'Use this command to download an unconfigured os image for a certain device type.\nCheck available types with `balena devices supported`\n\nIf version is not specified the newest stable (non-pre-release) version of OS\nis downloaded if available, or the newest version otherwise (if all existing\nversions for the given device type are pre-release).\n\nYou can pass `--version menu` to pick the OS version from the interactive menu\nof all available versions.\n\nExamples:\n\n	$ balena os download raspberrypi3 -o ../foo/bar/raspberry-pi.img\n	$ balena os download raspberrypi3 -o ../foo/bar/raspberry-pi.img --version 1.24.1\n	$ balena os download raspberrypi3 -o ../foo/bar/raspberry-pi.img --version ^1.20.0\n	$ balena os download raspberrypi3 -o ../foo/bar/raspberry-pi.img --version latest\n	$ balena os download raspberrypi3 -o ../foo/bar/raspberry-pi.img --version default\n	$ balena os download raspberrypi3 -o ../foo/bar/raspberry-pi.img --version menu',
  permission: 'user',
  options: [
    {
      signature: 'output',
      description: 'output path',
      parameter: 'output',
      alias: 'o',
      required: 'You have to specify the output location'
    }, commandOptions.osVersionOrSemver
  ],
  action: function(params, options, done) {
    var Promise, displayVersion, fs, manager, rindle, unzip, visuals;
    Promise = require('bluebird');
    unzip = require('unzip2');
    fs = require('fs');
    rindle = require('rindle');
    manager = require('balena-image-manager');
    visuals = require('resin-cli-visuals');
    console.info("Getting device operating system for " + params.type);
    displayVersion = '';
    return Promise["try"](function() {
      if (!options.version) {
        console.warn('OS version is not specified, using the default version: the newest stable (non-pre-release) version if available, or the newest version otherwise (if all existing versions for the given device type are pre-release).');
        return 'default';
      }
      return resolveVersion(params.type, options.version);
    }).then(function(version) {
      if (version !== 'default') {
        displayVersion = " " + version;
      }
      return manager.get(params.type, version);
    }).then(function(stream) {
      var bar, output, spinner;
      bar = new visuals.Progress("Downloading Device OS" + displayVersion);
      spinner = new visuals.Spinner("Downloading Device OS" + displayVersion + " (size unknown)");
      stream.on('progress', function(state) {
        if (state != null) {
          return bar.update(state);
        } else {
          return spinner.start();
        }
      });
      stream.on('end', function() {
        return spinner.stop();
      });
      if (stream.mime === 'application/zip') {
        output = unzip.Extract({
          path: options.output
        });
      } else {
        output = fs.createWriteStream(options.output);
      }
      return rindle.wait(stream.pipe(output))["return"](options.output);
    }).tap(function(output) {
      return console.info('The image was downloaded successfully');
    }).nodeify(done);
  }
};

buildConfigForDeviceType = function(deviceType, advanced) {
  var advancedGroup, form, helpers, override, questions;
  if (advanced == null) {
    advanced = false;
  }
  form = require('resin-cli-form');
  helpers = require('../utils/helpers');
  questions = deviceType.options;
  if (!advanced) {
    advancedGroup = _.find(questions, {
      name: 'advanced',
      isGroup: true
    });
    if (advancedGroup != null) {
      override = helpers.getGroupDefaults(advancedGroup);
    }
  }
  return form.run(questions, {
    override: override
  });
};

buildConfig = function(image, deviceTypeSlug, advanced) {
  var Promise, helpers;
  if (advanced == null) {
    advanced = false;
  }
  Promise = require('bluebird');
  helpers = require('../utils/helpers');
  return Promise.resolve(helpers.getManifest(image, deviceTypeSlug)).then(function(deviceTypeManifest) {
    return buildConfigForDeviceType(deviceTypeManifest, advanced);
  });
};

exports.buildConfig = {
  signature: 'os build-config <image> <device-type>',
  description: 'build the OS config and save it to the JSON file',
  help: 'Use this command to prebuild the OS config once and skip the interactive part of `balena os configure`.\n\nExample:\n\n	$ balena os build-config ../path/rpi3.img raspberrypi3 --output rpi3-config.json\n	$ balena os configure ../path/rpi3.img 7cf02a6 --config "$(cat rpi3-config.json)"',
  permission: 'user',
  options: [
    commandOptions.advancedConfig, {
      signature: 'output',
      description: 'the path to the output JSON file',
      alias: 'o',
      required: 'the output path is required',
      parameter: 'output'
    }
  ],
  action: function(params, options, done) {
    var Promise, fs, writeFileAsync;
    fs = require('fs');
    Promise = require('bluebird');
    writeFileAsync = Promise.promisify(fs.writeFile);
    return buildConfig(params.image, params['device-type'], options.advanced).then(function(answers) {
      return writeFileAsync(options.output, JSON.stringify(answers, null, 4));
    }).nodeify(done);
  }
};

exports.configure = {
  signature: 'os configure <image>',
  description: 'configure an os image',
  help: 'Use this command to configure a previously downloaded operating system image for\nthe specific device or for an application generally.\n\nThis command will try to automatically determine the operating system version in order\nto correctly configure the image. It may fail to do so however, in which case you\'ll\nhave to call this command again with the exact version number of the targeted image.\n\nNote that device api keys are only supported on balenaOS 2.0.3+.\n\nThis command still supports the *deprecated* format where the UUID and optionally device key\nare passed directly on the command line, but the recommended way is to pass either an --app or\n--device argument. The deprecated format will be remove in a future release.\n\nIn case that you want to configure an image for an application with mixed device types,\nyou can pass the --device-type argument along with --app to specify the target device type.\n\nExamples:\n\n	$ balena os configure ../path/rpi3.img --device 7cf02a6\n	$ balena os configure ../path/rpi3.img --device 7cf02a6 --device-api-key <existingDeviceKey>\n	$ balena os configure ../path/rpi3.img --app MyApp\n	$ balena os configure ../path/rpi3.img --app MyApp --version 2.12.7\n	$ balena os configure ../path/rpi3.img --app MyFinApp --device-type raspberrypi3',
  permission: 'user',
  options: [
    commandOptions.advancedConfig, commandOptions.optionalApplication, commandOptions.optionalDevice, commandOptions.optionalDeviceApiKey, commandOptions.optionalDeviceType, commandOptions.optionalOsVersion, {
      signature: 'config',
      description: 'path to the config JSON file, see `balena os build-config`',
      parameter: 'config'
    }
  ],
  action: function(params, options, done) {
    var Promise, balena, configurationResourceType, deviceApiKey, fs, generateApplicationConfig, generateDeviceConfig, helpers, init, patterns, readFileAsync, ref, uuid;
    normalizeUuidProp(options, 'device');
    fs = require('fs');
    Promise = require('bluebird');
    readFileAsync = Promise.promisify(fs.readFile);
    balena = require('balena-sdk').fromSharedOptions();
    init = require('balena-device-init');
    helpers = require('../utils/helpers');
    patterns = require('../utils/patterns');
    ref = require('../utils/config'), generateDeviceConfig = ref.generateDeviceConfig, generateApplicationConfig = ref.generateApplicationConfig;
    if (_.filter([options.device, options.application]).length !== 1) {
      patterns.exitWithExpectedError('To configure an image, you must provide exactly one of:\n\n* A device, with --device <uuid>\n* An application, with --app <appname>\n\nSee the help page for examples:\n\n  $ balena help os configure');
    }
    if (!options.application && options.deviceType) {
      patterns.exitWithExpectedError('Specifying a different device type is only supported when\nconfiguring an image using an application as a parameter:\n\n* An application, with --app <appname>\n* A specific device type, with --device-type <deviceTypeSlug>\n\nSee the help page for examples:\n\n  $ balena help os configure');
    }
    uuid = options.device;
    deviceApiKey = options.deviceApiKey;
    console.info('Configuring operating system image');
    configurationResourceType = uuid ? 'device' : 'application';
    return balena.models[configurationResourceType].get(uuid || options.application).then(function(appOrDevice) {
      var answersPromise, app, appManifestPromise, deviceType, manifestPromise, paramManifestPromise;
      deviceType = options.deviceType || appOrDevice.device_type;
      manifestPromise = helpers.getManifest(params.image, deviceType);
      if (options.application && options.deviceType) {
        app = appOrDevice;
        appManifestPromise = balena.models.device.getManifestBySlug(app.device_type);
        paramManifestPromise = balena.models.device.getManifestBySlug(options.deviceType);
        manifestPromise = Promise.resolve(manifestPromise).tap(function() {
          return Promise.join(appManifestPromise, paramManifestPromise, function(appDeviceType, paramDeviceType) {
            if (!helpers.areDeviceTypesCompatible(appDeviceType, paramDeviceType)) {
              throw new balena.errors.BalenaInvalidDeviceType("Device type " + options.deviceType + " is incompatible with application " + options.application);
            }
          });
        });
      }
      answersPromise = Promise["try"](function() {
        if (options.config) {
          return readFileAsync(options.config, 'utf8').then(JSON.parse);
        }
        return manifestPromise.then(function(deviceTypeManifest) {
          return buildConfigForDeviceType(deviceTypeManifest, options.advanced);
        });
      });
      return Promise.join(answersPromise, manifestPromise, function(answers, manifest) {
        answers.version = options.version;
        if (configurationResourceType === 'application') {
          answers.deviceType = deviceType;
        }
        if (answers.version == null) {
          answers.version = Promise.resolve(helpers.getOsVersion(params.image, manifest)).tap(function(version) {
            if (version == null) {
              throw new Error('Could not read OS version from the image. ' + 'Please specify the version manually with the ' + '--version argument to this command.');
            }
          });
        }
        return Promise.props(answers).then(function(answers) {
          return (configurationResourceType === 'device' ? generateDeviceConfig(appOrDevice, deviceApiKey, answers) : generateApplicationConfig(appOrDevice, answers)).then(function(config) {
            return init.configure(params.image, manifest, config, answers);
          });
        });
      });
    }).then(helpers.osProgressHandler).nodeify(done);
  }
};

INIT_WARNING_MESSAGE = 'Note: Initializing the device may ask for administrative permissions\nbecause we need to access the raw devices directly.';

exports.initialize = {
  signature: 'os initialize <image>',
  description: 'initialize an os image',
  help: "Use this command to initialize a device with previously configured operating system image.\n\n" + INIT_WARNING_MESSAGE + "\n\nExamples:\n\n	$ balena os initialize ../path/rpi.img --type 'raspberry-pi'",
  permission: 'user',
  options: [
    commandOptions.yes, {
      signature: 'type',
      description: 'device type (Check available types with `balena devices supported`)',
      parameter: 'type',
      alias: 't',
      required: 'You have to specify a device type'
    }, commandOptions.drive
  ],
  action: function(params, options, done) {
    var Promise, form, helpers, patterns, umountAsync;
    Promise = require('bluebird');
    umountAsync = Promise.promisify(require('umount').umount);
    form = require('resin-cli-form');
    patterns = require('../utils/patterns');
    helpers = require('../utils/helpers');
    console.info("Initializing device\n\n" + INIT_WARNING_MESSAGE);
    return Promise.resolve(helpers.getManifest(params.image, options.type)).then(function(manifest) {
      var ref;
      return (ref = manifest.initialization) != null ? ref.options : void 0;
    }).then(function(questions) {
      return form.run(questions, {
        override: {
          drive: options.drive
        }
      });
    }).tap(function(answers) {
      if (answers.drive == null) {
        return;
      }
      return patterns.confirm(options.yes, "This will erase " + answers.drive + ". Are you sure?", "Going to erase " + answers.drive + ".")["return"](answers.drive).then(umountAsync);
    }).tap(function(answers) {
      return helpers.sudo(['internal', 'osinit', params.image, options.type, JSON.stringify(answers)]);
    }).then(function(answers) {
      if (answers.drive == null) {
        return;
      }
      return umountAsync(answers.drive).tap(function() {
        return console.info("You can safely remove " + answers.drive + " now");
      });
    }).nodeify(done);
  }
};
