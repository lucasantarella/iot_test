// Generated by CoffeeScript 1.12.7

/*
Copyright 2016-2018 Balena Ltd.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */
var commandOptions, normalizeUuidProp;

commandOptions = require('./command-options');

normalizeUuidProp = require('../utils/normalization').normalizeUuidProp;

exports.read = {
  signature: 'config read',
  description: 'read a device configuration',
  help: 'Use this command to read the config.json file from the mounted filesystem (e.g. SD card) of a provisioned device"\n\nExamples:\n\n	$ balena config read --type raspberry-pi\n	$ balena config read --type raspberry-pi --drive /dev/disk2',
  options: [
    {
      signature: 'type',
      description: 'device type (Check available types with `balena devices supported`)',
      parameter: 'type',
      alias: 't',
      required: 'You have to specify a device type'
    }, {
      signature: 'drive',
      description: 'drive',
      parameter: 'drive',
      alias: 'd'
    }
  ],
  permission: 'user',
  root: true,
  action: function(params, options, done) {
    var Promise, config, prettyjson, umountAsync, visuals;
    Promise = require('bluebird');
    config = require('balena-config-json');
    visuals = require('resin-cli-visuals');
    umountAsync = Promise.promisify(require('umount').umount);
    prettyjson = require('prettyjson');
    return Promise["try"](function() {
      return options.drive || visuals.drive('Select the device drive');
    }).tap(umountAsync).then(function(drive) {
      return config.read(drive, options.type);
    }).tap(function(configJSON) {
      return console.info(prettyjson.render(configJSON));
    }).nodeify(done);
  }
};

exports.write = {
  signature: 'config write <key> <value>',
  description: 'write a device configuration',
  help: 'Use this command to write the config.json file to the mounted filesystem (e.g. SD card) of a provisioned device\n\nExamples:\n\n	$ balena config write --type raspberry-pi username johndoe\n	$ balena config write --type raspberry-pi --drive /dev/disk2 username johndoe\n	$ balena config write --type raspberry-pi files.network/settings "..."',
  options: [
    {
      signature: 'type',
      description: 'device type (Check available types with `balena devices supported`)',
      parameter: 'type',
      alias: 't',
      required: 'You have to specify a device type'
    }, {
      signature: 'drive',
      description: 'drive',
      parameter: 'drive',
      alias: 'd'
    }
  ],
  permission: 'user',
  root: true,
  action: function(params, options, done) {
    var Promise, _, config, umountAsync, visuals;
    Promise = require('bluebird');
    _ = require('lodash');
    config = require('balena-config-json');
    visuals = require('resin-cli-visuals');
    umountAsync = Promise.promisify(require('umount').umount);
    return Promise["try"](function() {
      return options.drive || visuals.drive('Select the device drive');
    }).tap(umountAsync).then(function(drive) {
      return config.read(drive, options.type).then(function(configJSON) {
        console.info("Setting " + params.key + " to " + params.value);
        _.set(configJSON, params.key, params.value);
        return configJSON;
      }).tap(function() {
        return umountAsync(drive);
      }).then(function(configJSON) {
        return config.write(drive, options.type, configJSON);
      });
    }).tap(function() {
      return console.info('Done');
    }).nodeify(done);
  }
};

exports.inject = {
  signature: 'config inject <file>',
  description: 'inject a device configuration file',
  help: 'Use this command to inject a config.json file to the mounted filesystem\n(e.g. SD card or mounted balenaOS image) of a provisioned device"\n\nExamples:\n\n	$ balena config inject my/config.json --type raspberry-pi\n	$ balena config inject my/config.json --type raspberry-pi --drive /dev/disk2',
  options: [
    {
      signature: 'type',
      description: 'device type (Check available types with `balena devices supported`)',
      parameter: 'type',
      alias: 't',
      required: 'You have to specify a device type'
    }, {
      signature: 'drive',
      description: 'drive',
      parameter: 'drive',
      alias: 'd'
    }
  ],
  permission: 'user',
  root: true,
  action: function(params, options, done) {
    var Promise, config, readFileAsync, umountAsync, visuals;
    Promise = require('bluebird');
    config = require('balena-config-json');
    visuals = require('resin-cli-visuals');
    umountAsync = Promise.promisify(require('umount').umount);
    readFileAsync = Promise.promisify(require('fs').readFile);
    return Promise["try"](function() {
      return options.drive || visuals.drive('Select the device drive');
    }).tap(umountAsync).then(function(drive) {
      return readFileAsync(params.file, 'utf8').then(JSON.parse).then(function(configJSON) {
        return config.write(drive, options.type, configJSON);
      });
    }).tap(function() {
      return console.info('Done');
    }).nodeify(done);
  }
};

exports.reconfigure = {
  signature: 'config reconfigure',
  description: 'reconfigure a provisioned device',
  help: 'Use this command to reconfigure a provisioned device\n\nExamples:\n\n	$ balena config reconfigure --type raspberry-pi\n	$ balena config reconfigure --type raspberry-pi --advanced\n	$ balena config reconfigure --type raspberry-pi --drive /dev/disk2',
  options: [
    {
      signature: 'type',
      description: 'device type (Check available types with `balena devices supported`)',
      parameter: 'type',
      alias: 't',
      required: 'You have to specify a device type'
    }, {
      signature: 'drive',
      description: 'drive',
      parameter: 'drive',
      alias: 'd'
    }, {
      signature: 'advanced',
      description: 'show advanced commands',
      boolean: true,
      alias: 'v'
    }
  ],
  permission: 'user',
  root: true,
  action: function(params, options, done) {
    var Promise, config, runCommand, umountAsync, visuals;
    Promise = require('bluebird');
    config = require('balena-config-json');
    visuals = require('resin-cli-visuals');
    runCommand = require('../utils/helpers').runCommand;
    umountAsync = Promise.promisify(require('umount').umount);
    return Promise["try"](function() {
      return options.drive || visuals.drive('Select the device drive');
    }).tap(umountAsync).then(function(drive) {
      return config.read(drive, options.type).get('uuid').tap(function() {
        return umountAsync(drive);
      }).then(function(uuid) {
        var configureCommand;
        configureCommand = "os configure " + drive + " --device " + uuid;
        if (options.advanced) {
          configureCommand += ' --advanced';
        }
        return runCommand(configureCommand);
      });
    }).then(function() {
      return console.info('Done');
    }).nodeify(done);
  }
};

exports.generate = {
  signature: 'config generate',
  description: 'generate a config.json file',
  help: 'Use this command to generate a config.json for a device or application.\n\nCalling this command with the exact version number of the targeted image is required.\n\nThis is interactive by default, but you can do this automatically without interactivity\nby specifying an option for each question on the command line, if you know the questions\nthat will be asked for the relevant device type.\n\nIn case that you want to configure an image for an application with mixed device types,\nyou can pass the --device-type argument along with --app to specify the target device type.\n\nExamples:\n\n	$ balena config generate --device 7cf02a6 --version 2.12.7\n	$ balena config generate --device 7cf02a6 --version 2.12.7 --generate-device-api-key\n	$ balena config generate --device 7cf02a6 --version 2.12.7 --device-api-key <existingDeviceKey>\n	$ balena config generate --device 7cf02a6 --version 2.12.7 --output config.json\n	$ balena config generate --app MyApp --version 2.12.7\n	$ balena config generate --app MyApp --version 2.12.7 --device-type fincm3\n	$ balena config generate --app MyApp --version 2.12.7 --output config.json\n	$ balena config generate --app MyApp --version 2.12.7 --network wifi --wifiSsid mySsid --wifiKey abcdefgh --appUpdatePollInterval 1',
  options: [
    commandOptions.osVersion, commandOptions.optionalApplication, commandOptions.optionalDevice, commandOptions.optionalDeviceApiKey, commandOptions.optionalDeviceType, {
      signature: 'generate-device-api-key',
      description: 'generate a fresh device key for the device',
      boolean: true
    }, {
      signature: 'output',
      description: 'output',
      parameter: 'output',
      alias: 'o'
    }, {
      signature: 'network',
      description: 'the network type to use: ethernet or wifi',
      parameter: 'network'
    }, {
      signature: 'wifiSsid',
      description: 'the wifi ssid to use (used only if --network is set to wifi)',
      parameter: 'wifiSsid'
    }, {
      signature: 'wifiKey',
      description: 'the wifi key to use (used only if --network is set to wifi)',
      parameter: 'wifiKey'
    }, {
      signature: 'appUpdatePollInterval',
      description: 'how frequently (in minutes) to poll for application updates',
      parameter: 'appUpdatePollInterval'
    }
  ],
  permission: 'user',
  action: function(params, options, done) {
    var Promise, balena, exitWithExpectedError, form, generateApplicationConfig, generateDeviceConfig, helpers, prettyjson, ref, writeFileAsync;
    normalizeUuidProp(options, 'device');
    Promise = require('bluebird');
    writeFileAsync = Promise.promisify(require('fs').writeFile);
    balena = require('balena-sdk').fromSharedOptions();
    form = require('resin-cli-form');
    prettyjson = require('prettyjson');
    ref = require('../utils/config'), generateDeviceConfig = ref.generateDeviceConfig, generateApplicationConfig = ref.generateApplicationConfig;
    helpers = require('../utils/helpers');
    exitWithExpectedError = require('../utils/patterns').exitWithExpectedError;
    if ((options.device == null) && (options.application == null)) {
      exitWithExpectedError('You have to pass either a device or an application.\n\nSee the help page for examples:\n\n  $ balena help config generate');
    }
    if (!options.application && options.deviceType) {
      exitWithExpectedError('Specifying a different device type is only supported when\ngenerating a config for an application:\n\n* An application, with --app <appname>\n* A specific device type, with --device-type <deviceTypeSlug>\n\nSee the help page for examples:\n\n  $ balena help config generate');
    }
    return Promise["try"](function() {
      if (options.device != null) {
        return balena.models.device.get(options.device);
      }
      return balena.models.application.get(options.application);
    }).then(function(resource) {
      var app, appManifestPromise, deviceType, manifestPromise;
      deviceType = options.deviceType || resource.device_type;
      manifestPromise = balena.models.device.getManifestBySlug(deviceType);
      if (options.application && options.deviceType) {
        app = resource;
        appManifestPromise = balena.models.device.getManifestBySlug(app.device_type);
        manifestPromise = manifestPromise.tap(function(paramDeviceType) {
          return appManifestPromise.then(function(appDeviceType) {
            if (!helpers.areDeviceTypesCompatible(appDeviceType, paramDeviceType)) {
              throw new balena.errors.BalenaInvalidDeviceType("Device type " + options.deviceType + " is incompatible with application " + options.application);
            }
          });
        });
      }
      return manifestPromise.get('options').then(function(formOptions) {
        return form.run(formOptions, {
          override: options
        });
      }).then(function(answers) {
        answers.version = options.version;
        if (resource.uuid != null) {
          return generateDeviceConfig(resource, options.deviceApiKey || options['generate-device-api-key'], answers);
        } else {
          answers.deviceType = deviceType;
          return generateApplicationConfig(resource, answers);
        }
      });
    }).then(function(config) {
      if (options.output != null) {
        return writeFileAsync(options.output, JSON.stringify(config));
      }
      return console.log(prettyjson.render(config));
    }).nodeify(done);
  }
};
