"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_tags_1 = require("common-tags");
const normalization_1 = require("../utils/normalization");
const commandOptions = require("./command-options");
exports.list = {
    signature: 'tags',
    description: 'list all resource tags',
    help: common_tags_1.stripIndent `
		Use this command to list all tags for
		a particular application, device or release.

		This command lists all application/device/release tags.

		Example:

			$ balena tags --application MyApp
			$ balena tags --device 7cf02a6
			$ balena tags --release 1234
	`,
    options: [
        commandOptions.optionalApplication,
        commandOptions.optionalDevice,
        commandOptions.optionalRelease,
    ],
    permission: 'user',
    action(_params, options, done) {
        return __awaiter(this, void 0, void 0, function* () {
            normalization_1.normalizeUuidProp(options, 'device');
            const Bluebird = yield Promise.resolve().then(() => require('bluebird'));
            const _ = yield Promise.resolve().then(() => require('lodash'));
            const balena = (yield Promise.resolve().then(() => require('balena-sdk'))).fromSharedOptions();
            const visuals = yield Promise.resolve().then(() => require('resin-cli-visuals'));
            const { exitWithExpectedError } = yield Promise.resolve().then(() => require('../utils/patterns'));
            return Bluebird.try(() => {
                const wrongParametersError = common_tags_1.stripIndent `
				To list resource tags, you must provide exactly one of:

				* An application, with --application <appname>
				* A device, with --device <uuid>
				* A release, with --release <id>

				See the help page for examples:

				  $ balena help tags
			`;
                if (_.filter([options.application, options.device, options.release])
                    .length !== 1) {
                    return exitWithExpectedError(wrongParametersError);
                }
                if (options.application) {
                    return balena.models.application.tags.getAllByApplication(options.application);
                }
                if (options.device) {
                    return balena.models.device.tags.getAllByDevice(options.device);
                }
                if (options.release) {
                    return balena.models.release.tags.getAllByRelease(options.release);
                }
                return exitWithExpectedError(wrongParametersError);
            })
                .tap(function (environmentVariables) {
                if (_.isEmpty(environmentVariables)) {
                    exitWithExpectedError('No tags found');
                }
                console.log(visuals.table.horizontal(environmentVariables, [
                    'id',
                    'tag_key',
                    'value',
                ]));
            })
                .nodeify(done);
        });
    },
};
exports.set = {
    signature: 'tag set <tagKey> [value]',
    description: 'set a resource tag',
    help: common_tags_1.stripIndent `
		Use this command to set a tag to an application, device or release.

		You can optionally provide a value to be associated with the created
		tag, as an extra argument after the tag key. When the value isn't
		provided, a tag with an empty value is created.

		Examples:

			$ balena tag set mySimpleTag --application MyApp
			$ balena tag set myCompositeTag myTagValue --application MyApp
			$ balena tag set myCompositeTag myTagValue --device 7cf02a6
			$ balena tag set myCompositeTag myTagValue --release 1234
			$ balena tag set myCompositeTag "my tag value with whitespaces" --release 1234
	`,
    options: [
        commandOptions.optionalApplication,
        commandOptions.optionalDevice,
        commandOptions.optionalRelease,
    ],
    permission: 'user',
    action(params, options, done) {
        return __awaiter(this, void 0, void 0, function* () {
            normalization_1.normalizeUuidProp(options, 'device');
            const Bluebird = yield Promise.resolve().then(() => require('bluebird'));
            const _ = yield Promise.resolve().then(() => require('lodash'));
            const balena = (yield Promise.resolve().then(() => require('balena-sdk'))).fromSharedOptions();
            const { exitWithExpectedError } = yield Promise.resolve().then(() => require('../utils/patterns'));
            return Bluebird.try(() => {
                if (_.isEmpty(params.tagKey)) {
                    return exitWithExpectedError('No tag key was provided');
                }
                if (_.filter([options.application, options.device, options.release])
                    .length !== 1) {
                    return exitWithExpectedError(common_tags_1.stripIndent `
					To set a resource tag, you must provide exactly one of:

					* An application, with --application <appname>
					* A device, with --device <uuid>
					* A release, with --release <id>

					See the help page for examples:

					  $ balena help tag set
				`);
                }
                if (params.value == null) {
                    params.value = '';
                }
                if (options.application) {
                    return balena.models.application.tags.set(options.application, params.tagKey, params.value);
                }
                if (options.device) {
                    return balena.models.device.tags.set(options.device, params.tagKey, params.value);
                }
                if (options.release) {
                    return balena.models.release.tags.set(options.release, params.tagKey, params.value);
                }
            }).nodeify(done);
        });
    },
};
exports.remove = {
    signature: 'tag rm <tagKey>',
    description: 'remove a resource tag',
    help: common_tags_1.stripIndent `
		Use this command to remove a tag from an application, device or release.

		Examples:

			$ balena tag rm myTagKey --application MyApp
			$ balena tag rm myTagKey --device 7cf02a6
			$ balena tag rm myTagKey --release 1234
	`,
    options: [
        commandOptions.optionalApplication,
        commandOptions.optionalDevice,
        commandOptions.optionalRelease,
    ],
    permission: 'user',
    action(params, options, done) {
        return __awaiter(this, void 0, void 0, function* () {
            const Bluebird = yield Promise.resolve().then(() => require('bluebird'));
            const _ = yield Promise.resolve().then(() => require('lodash'));
            const balena = (yield Promise.resolve().then(() => require('balena-sdk'))).fromSharedOptions();
            const { exitWithExpectedError } = yield Promise.resolve().then(() => require('../utils/patterns'));
            return Bluebird.try(() => {
                if (_.isEmpty(params.tagKey)) {
                    return exitWithExpectedError('No tag key was provided');
                }
                if (_.filter([options.application, options.device, options.release])
                    .length !== 1) {
                    return exitWithExpectedError(common_tags_1.stripIndent `
					To remove a resource tag, you must provide exactly one of:

					* An application, with --application <appname>
					* A device, with --device <uuid>
					* A release, with --release <id>

					See the help page for examples:

					  $ balena help tag rm
				`);
                }
                if (options.application) {
                    return balena.models.application.tags.remove(options.application, params.tagKey);
                }
                if (options.device) {
                    return balena.models.device.tags.remove(options.device, params.tagKey);
                }
                if (options.release) {
                    return balena.models.release.tags.remove(options.release, params.tagKey);
                }
            }).nodeify(done);
        });
    },
};
//# sourceMappingURL=tags.js.map