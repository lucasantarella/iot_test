"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Bluebird = require("bluebird");
const common_tags_1 = require("common-tags");
exports.join = {
    signature: 'join [deviceIp]',
    description: 'Promote a local device running balenaOS to join an application on a balena server',
    help: common_tags_1.stripIndent `
		Use this command to move a local device to an application on another balena server.

		For example, you could provision a device against an openBalena installation
		where you perform end-to-end tests and then move it to balenaCloud when it's
		ready for production.

		Moving a device between applications on the same server is not supported.

		If you don't specify a device hostname or IP, this command will automatically
		scan the local network for balenaOS devices and prompt you to select one
		from an interactive picker. This usually requires root privileges.

		Examples:

			$ balena join
			$ balena join balena.local
			$ balena join balena.local --application MyApp
			$ balena join 192.168.1.25
			$ balena join 192.168.1.25 --application MyApp
	`,
    options: [
        {
            signature: 'application',
            parameter: 'application',
            alias: 'a',
            description: 'The name of the application the device should join',
        },
    ],
    primary: true,
    action(params, options, done) {
        return __awaiter(this, void 0, void 0, function* () {
            const balena = yield Promise.resolve().then(() => require('balena-sdk'));
            const Logger = yield Promise.resolve().then(() => require('../utils/logger'));
            const promote = yield Promise.resolve().then(() => require('../utils/promote'));
            const sdk = balena.fromSharedOptions();
            const logger = new Logger();
            return Bluebird.try(() => {
                return promote.join(logger, sdk, params.deviceIp, options.application);
            }).nodeify(done);
        });
    },
};
//# sourceMappingURL=join.js.map