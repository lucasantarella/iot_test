// Generated by CoffeeScript 1.12.7

/*
Copyright 2016-2017 Balena

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */
var BalenaSdk, Promise, Raven, actions, balena, capitano, capitanoExecuteAsync, cli, errors, events, exitWithExpectedError, globalTunnel, proxy, runCommand, settings, update, validNodeVersions;

Raven = require('raven');

Raven.disableConsoleAlerts();

Raven.config(require('./config').sentryDsn, {
  captureUnhandledRejections: true,
  autoBreadcrumbs: true,
  release: require('../package.json').version
}).install(function(logged, error) {
  console.error(error);
  return process.exit(1);
});

Raven.setContext({
  extra: {
    args: process.argv,
    node_version: process.version
  }
});

validNodeVersions = require('../package.json').engines.node;

if (!require('semver').satisfies(process.version, validNodeVersions)) {
  console.warn("Warning: this version of Node does not match the requirements of this package.\nThis package expects " + validNodeVersions + ", but you're using " + process.version + ".\nThis may cause unexpected behaviour.\n\nTo upgrade your Node, visit https://nodejs.org/en/download/\n");
}

globalTunnel = require('global-tunnel-ng');

settings = require('balena-settings-client');

try {
  proxy = settings.get('proxy') || null;
} catch (error1) {
  proxy = null;
}

globalTunnel.initialize(proxy);

global.PROXY_CONFIG = globalTunnel.proxyConfig;

Promise = require('bluebird');

capitano = require('capitano');

capitanoExecuteAsync = Promise.promisify(capitano.execute);

BalenaSdk = require('balena-sdk');

BalenaSdk.setSharedOptions({
  apiUrl: settings.get('apiUrl'),
  imageMakerUrl: settings.get('imageMakerUrl'),
  dataDirectory: settings.get('dataDirectory'),
  retries: 2
});

balena = BalenaSdk.fromSharedOptions();

actions = require('./actions');

errors = require('./errors');

events = require('./events');

update = require('./utils/update');

exitWithExpectedError = require('./utils/patterns').exitWithExpectedError;

require('any-promise/register/bluebird');

capitano.permission('user', function(done) {
  return balena.auth.isLoggedIn().then(function(isLoggedIn) {
    if (!isLoggedIn) {
      return exitWithExpectedError('You have to log in to continue\n\nRun the following command to go through the login wizard:\n\n  $ balena login');
    }
  }).nodeify(done);
});

capitano.command({
  signature: '*',
  action: function() {
    return capitano.execute({
      command: 'help'
    });
  }
});

capitano.globalOption({
  signature: 'help',
  boolean: true,
  alias: 'h'
});

capitano.command(actions.info.version);

capitano.command(actions.help.help);

capitano.command(actions.wizard.wizard);

capitano.command(actions.apiKey.generate);

capitano.command(actions.app.create);

capitano.command(actions.app.list);

capitano.command(actions.app.remove);

capitano.command(actions.app.restart);

capitano.command(actions.app.info);

capitano.command(actions.auth.login);

capitano.command(actions.auth.logout);

capitano.command(actions.auth.signup);

capitano.command(actions.auth.whoami);

capitano.command(actions.device.list);

capitano.command(actions.device.supported);

capitano.command(actions.device.rename);

capitano.command(actions.device.init);

capitano.command(actions.device.remove);

capitano.command(actions.device.identify);

capitano.command(actions.device.reboot);

capitano.command(actions.device.shutdown);

capitano.command(actions.device.enableDeviceUrl);

capitano.command(actions.device.disableDeviceUrl);

capitano.command(actions.device.getDeviceUrl);

capitano.command(actions.device.hasDeviceUrl);

capitano.command(actions.device.register);

capitano.command(actions.device.move);

capitano.command(actions.device.info);

capitano.command(actions.notes.set);

capitano.command(actions.keys.list);

capitano.command(actions.keys.add);

capitano.command(actions.keys.info);

capitano.command(actions.keys.remove);

capitano.command(actions.env.list);

capitano.command(actions.env.add);

capitano.command(actions.env.rename);

capitano.command(actions.env.remove);

capitano.command(actions.tags.list);

capitano.command(actions.tags.set);

capitano.command(actions.tags.remove);

capitano.command(actions.os.versions);

capitano.command(actions.os.download);

capitano.command(actions.os.buildConfig);

capitano.command(actions.os.configure);

capitano.command(actions.os.initialize);

capitano.command(actions.config.read);

capitano.command(actions.config.write);

capitano.command(actions.config.inject);

capitano.command(actions.config.reconfigure);

capitano.command(actions.config.generate);

capitano.command(actions.settings.list);

capitano.command(actions.logs);

capitano.command(actions.sync);

capitano.command(actions.preload);

capitano.command(actions.ssh);

capitano.command(actions.local.configure);

capitano.command(actions.local.flash);

capitano.command(actions.local.logs);

capitano.command(actions.local.push);

capitano.command(actions.local.ssh);

capitano.command(actions.local.scan);

capitano.command(actions.local.stop);

capitano.command(actions.util.availableDrives);

capitano.command(actions.internal.osInit);

capitano.command(actions.internal.scanDevices);

capitano.command(actions.internal.sudo);

capitano.command(actions.build);

capitano.command(actions.deploy);

capitano.command(actions.push.push);

capitano.command(actions.join.join);

capitano.command(actions.leave.leave);

update.notify();

cli = capitano.parse(process.argv);

runCommand = function() {
  var ref, ref1;
  if ((ref = cli.global) != null ? ref.help : void 0) {
    return capitanoExecuteAsync({
      command: "help " + ((ref1 = cli.command) != null ? ref1 : '')
    });
  } else {
    return capitanoExecuteAsync(cli);
  }
};

Promise.all([events.trackCommand(cli), runCommand()])["catch"](errors.handle);
