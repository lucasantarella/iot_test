// Generated by CoffeeScript 1.12.5

/*
Copyright 2017 Balena

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */

/*
This file contains an abstract implementation for dependent metadata resources:
key-value resources directly attached to a parent (e.g. tags, config variables).
 */
var Promise, errors, findCallback, isEmpty, isId, mergePineOptions, ref, unauthorizedError, uniqueKeyViolated;

Promise = require('bluebird');

isEmpty = require('lodash/isEmpty');

errors = require('balena-errors');

ref = require('../util'), findCallback = ref.findCallback, isId = ref.isId, mergePineOptions = ref.mergePineOptions, unauthorizedError = ref.unauthorizedError, uniqueKeyViolated = ref.uniqueKeyViolated;

exports.buildDependentResource = function(arg, arg1) {
  var ResourceNotFoundError, exports, getResourceId, parentResourceName, pine, resourceKeyField, resourceName;
  pine = arg.pine;
  resourceName = arg1.resourceName, resourceKeyField = arg1.resourceKeyField, parentResourceName = arg1.parentResourceName, getResourceId = arg1.getResourceId, ResourceNotFoundError = arg1.ResourceNotFoundError;
  exports = {
    getAll: function(options, callback) {
      if (options == null) {
        options = {};
      }
      callback = findCallback(arguments);
      return pine.get({
        resource: resourceName,
        options: mergePineOptions({
          $orderby: resourceKeyField + " asc"
        }, options)
      }).asCallback(callback);
    },
    getAllByParent: function(parentParam, options, callback) {
      if (options == null) {
        options = {};
      }
      callback = findCallback(arguments);
      return getResourceId(parentParam).then(function(id) {
        var obj;
        return exports.getAll(mergePineOptions({
          $filter: (
            obj = {},
            obj["" + parentResourceName] = id,
            obj
          ),
          $orderby: resourceKeyField + " asc"
        }, options));
      }).asCallback(callback);
    },
    get: function(parentParam, key, callback) {
      callback = findCallback(arguments);
      return getResourceId(parentParam).then(function(id) {
        var obj;
        return pine.get({
          resource: resourceName,
          options: {
            $filter: (
              obj = {},
              obj["" + parentResourceName] = id,
              obj["" + resourceKeyField] = key,
              obj
            )
          }
        });
      }).then(function(results) {
        if (results[0]) {
          return results[0].value;
        }
      }).asCallback(callback);
    },
    set: function(parentParam, key, value, callback) {
      return Promise["try"](function() {
        value = String(value);
        if (isId(parentParam)) {
          return parentParam;
        } else {
          return getResourceId(parentParam);
        }
      }).then(function(parentId) {
        var obj;
        return pine.post({
          resource: resourceName,
          body: (
            obj = {},
            obj["" + parentResourceName] = parentId,
            obj["" + resourceKeyField] = key,
            obj.value = value,
            obj
          )
        }).tap(function(result) {
          if (isId(parentParam) && isEmpty(result)) {
            throw new ResourceNotFoundError(parentParam);
          }
        }).tapCatch(unauthorizedError, function() {
          if (!isId(parentParam)) {
            return;
          }
          return getResourceId(parentParam);
        })["catch"](uniqueKeyViolated, function() {
          var obj;
          return pine.patch({
            resource: resourceName,
            options: {
              $filter: (
                obj = {},
                obj["" + parentResourceName] = parentId,
                obj["" + resourceKeyField] = key,
                obj
              )
            },
            body: {
              value: value
            }
          });
        });
      }).asCallback(callback);
    },
    remove: function(parentParam, key, callback) {
      return getResourceId(parentParam).then(function(parentId) {
        var obj;
        return pine["delete"]({
          resource: "" + resourceName,
          options: {
            $filter: (
              obj = {},
              obj["" + parentResourceName] = parentId,
              obj["" + resourceKeyField] = key,
              obj
            )
          }
        });
      }).asCallback(callback);
    }
  };
  return exports;
};
