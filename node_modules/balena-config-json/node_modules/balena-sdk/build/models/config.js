// Generated by CoffeeScript 1.12.5

/*
Copyright 2016 Balena

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */
var getConfigModel, map, once, union;

once = require('lodash/once');

union = require('lodash/union');

map = require('lodash/map');

getConfigModel = function(deps, opts) {
  var apiUrl, deviceModel, exports, normalizeDeviceTypes, request;
  request = deps.request;
  apiUrl = opts.apiUrl;
  deviceModel = once(function() {
    return require('./device')(deps, opts);
  });
  exports = {};
  normalizeDeviceTypes = function(deviceTypes) {
    return map(deviceTypes, function(deviceType) {
      if (deviceType.state === 'PREVIEW') {
        deviceType.state = 'ALPHA';
        deviceType.name = deviceType.name.replace('(PREVIEW)', '(ALPHA)');
      }
      if (deviceType.state === 'EXPERIMENTAL') {
        deviceType.state = 'BETA';
        deviceType.name = deviceType.name.replace('(EXPERIMENTAL)', '(BETA)');
      }
      return deviceType;
    });
  };

  /**
  	 * @summary Get all configuration
  	 * @name getAll
  	 * @public
  	 * @function
  	 * @memberof balena.models.config
  	 *
  	 * @fulfil {Object} - configuration
  	 * @returns {Promise}
  	 *
  	 * @example
  	 * balena.models.config.getAll().then(function(config) {
  	 * 	console.log(config);
  	 * });
  	 *
  	 * @example
  	 * balena.models.config.getAll(function(error, config) {
  	 * 	if (error) throw error;
  	 * 	console.log(config);
  	 * });
   */
  exports.getAll = function(callback) {
    return request.send({
      method: 'GET',
      url: '/config',
      baseUrl: apiUrl,
      sendToken: false
    }).get('body').then(function(body) {
      body.deviceTypes = normalizeDeviceTypes(body.deviceTypes);
      return body;
    }).asCallback(callback);
  };

  /**
  	 * @summary Get device types
  	 * @name getDeviceTypes
  	 * @public
  	 * @function
  	 * @memberof balena.models.config
  	 *
  	 * @fulfil {Object[]} - device types
  	 * @returns {Promise}
  	 *
  	 * @example
  	 * balena.models.config.getDeviceTypes().then(function(deviceTypes) {
  	 * 	console.log(deviceTypes);
  	 * });
  	 *
  	 * @example
  	 * balena.models.config.getDeviceTypes(function(error, deviceTypes) {
  	 * 	if (error) throw error;
  	 * 	console.log(deviceTypes);
  	 * })
   */
  exports.getDeviceTypes = function(callback) {
    return request.send({
      method: 'GET',
      url: '/device-types/v1',
      baseUrl: apiUrl,
      sendToken: false
    }).get('body').tap(function(deviceTypes) {
      if (deviceTypes == null) {
        throw new Error('No device types');
      }
    }).then(normalizeDeviceTypes).asCallback(callback);
  };

  /**
  	 * @summary Get configuration/initialization options for a device type
  	 * @name getDeviceOptions
  	 * @public
  	 * @function
  	 * @memberof balena.models.config
  	 *
  	 * @param {String} deviceType - device type slug
  	 * @fulfil {Object[]} - configuration options
  	 * @returns {Promise}
  	 *
  	 * @example
  	 * balena.models.config.getDeviceOptions('raspberry-pi').then(function(options) {
  	 * 	console.log(options);
  	 * });
  	 *
  	 * @example
  	 * balena.models.config.getDeviceOptions('raspberry-pi', function(error, options) {
  	 * 	if (error) throw error;
  	 * 	console.log(options);
  	 * });
   */
  exports.getDeviceOptions = function(deviceType, callback) {
    return deviceModel().getManifestBySlug(deviceType).then(function(manifest) {
      if (manifest.initialization == null) {
        manifest.initialization = {};
      }
      return union(manifest.options, manifest.initialization.options);
    }).asCallback(callback);
  };
  return exports;
};

module.exports = getConfigModel;
