"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var noop = function () { };
var deprecated = {};
var addDeprecated = function (name, message) {
    deprecated[name] = function () {
        console.warn('pinejs-client deprecated:', message);
        deprecated[name] = noop;
    };
};
addDeprecated('expandFilter', '`$filter: a: b: ...` is deprecated, please use `$filter: a: $any: { $alias: "x", $expr: x: b: ... }` instead.');
function defaults() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {
        var arg = args_1[_a];
        if (arg != null) {
            return arg;
        }
    }
}
var mapObj = function (obj, fn) {
    var results = [];
    for (var key in obj) {
        if (obj.hasOwnProperty(key)) {
            results.push(fn(obj[key], key));
        }
    }
    return results;
};
var NumberIsFinite = Number.isFinite || (function (v) { return typeof v === 'number' && isFinite(v); });
var isString = function (v) {
    return typeof v === 'string';
};
var isBoolean = function (v) {
    return v === true || v === false;
};
var isDate = function (v) {
    return Object.prototype.toString.call(v) === '[object Date]';
};
var isObject = function (v) {
    return typeof v === 'object';
};
var isPromiseRejector = function (obj) {
    return obj != null && obj.reject != null;
};
var isValidOption = function (key) {
    return key === '$filter' ||
        key === '$expand' ||
        key === '$orderby' ||
        key === '$top' ||
        key === '$skip' ||
        key === '$select';
};
var encodedSlash = encodeURIComponent('/');
var encodedCount = encodeURIComponent('$count');
var trailingCountRegex = new RegExp("(?:(?:" + encodedSlash + ")|/)" + encodedCount + "$");
var Poll = (function () {
    function Poll(requestFn, intervalTime) {
        if (intervalTime === void 0) { intervalTime = 10000; }
        this.intervalTime = intervalTime;
        this.subscribers = {
            error: [],
            data: [],
        };
        this.stopped = false;
        this.requestFn = requestFn;
        this.start();
    }
    Poll.prototype.setPollInterval = function (intervalTime) {
        this.intervalTime = intervalTime;
        this.restartTimeout();
    };
    Poll.prototype.runRequest = function () {
        var _this = this;
        if (this.stopped || this.requestFn == null) {
            return;
        }
        this.requestFn()
            .then(function (response) {
            if (_this.stopped) {
                return;
            }
            _this.restartTimeout();
            _this.subscribers.data.forEach(function (fn) {
                try {
                    fn(response);
                }
                catch (error) {
                    console.error('pinejs-client error: Caught error in data event subscription:', error);
                }
            });
            return null;
        }, function (err) {
            if (_this.stopped) {
                return;
            }
            _this.restartTimeout();
            _this.subscribers.error.forEach(function (fn) {
                try {
                    fn(err);
                }
                catch (error) {
                    console.error('pinejs-client error: Caught error in error event subscription:', error);
                }
            });
            return null;
        });
    };
    Poll.prototype.on = function (name, fn) {
        var _this = this;
        var subscribers = this.subscribers[name];
        var index = subscribers.push(fn) - 1;
        return {
            unsubscribe: function () { return delete _this.subscribers[name][index]; }
        };
    };
    Poll.prototype.start = function () {
        this.stopped = false;
        this.runRequest();
    };
    Poll.prototype.stop = function () {
        if (this.pollInterval) {
            clearTimeout(this.pollInterval);
        }
        this.stopped = true;
    };
    Poll.prototype.destroy = function () {
        this.stop();
        this.requestFn = null;
        this.subscribers = {
            error: [],
            data: [],
        };
    };
    Poll.prototype.restartTimeout = function () {
        var _this = this;
        if (this.stopped) {
            return;
        }
        if (this.pollInterval) {
            clearTimeout(this.pollInterval);
        }
        this.pollInterval = setTimeout(function () { return _this.runRequest(); }, this.intervalTime);
    };
    return Poll;
}());
function PinejsClientCoreFactory(Promise) {
    if (!isPromiseRejector(Promise)) {
        throw new Error('The Promise implementation must support .reject');
    }
    var isPrimitive = function (value) {
        return value === null || isString(value) || NumberIsFinite(value) || isBoolean(value) || isDate(value);
    };
    var baseEscapeResource = function (resource) {
        if (isString(resource)) {
            return encodeURIComponent(resource);
        }
        else if (Array.isArray(resource)) {
            return resource.map(encodeURIComponent).join('/');
        }
        else {
            throw new Error('Not a valid resource: ' + typeof resource);
        }
    };
    var escapeResource = function (resource) {
        var encodedResource = baseEscapeResource(resource);
        if (trailingCountRegex.test(encodedResource)) {
            throw new Error('/$count can only be used for top level or expanded resources');
        }
        return encodedResource;
    };
    var escapeCountableResource = function (resource) {
        return baseEscapeResource(resource).replace(trailingCountRegex, '/$count');
    };
    var escapeValue = function (value) {
        if (isString(value)) {
            value = value.replace(/'/g, "''");
            return "'" + encodeURIComponent(value) + "'";
        }
        else if (isDate(value)) {
            return "datetime'" + value.toISOString() + "'";
        }
        else if (value === null || NumberIsFinite(value) || isBoolean(value)) {
            return value;
        }
        else {
            throw new Error('Not a valid value: ' + typeof value);
        }
    };
    var join = function (strOrArray, separator) {
        if (separator === void 0) { separator = ','; }
        if (isString(strOrArray)) {
            return strOrArray;
        }
        else if (Array.isArray(strOrArray)) {
            return strOrArray.join(separator);
        }
        else {
            throw new Error('Expected a string or array, got: ' + typeof strOrArray);
        }
    };
    var bracketJoin = function (arr, separator) {
        if (arr.length === 1) {
            return arr[0];
        }
        var resultArr = [];
        arr.map(function (subArr) {
            if (subArr.length > 1) {
                return "(" + subArr.join('') + ")";
            }
            return subArr[0];
        }).forEach(function (str, i) {
            if (i !== 0) {
                resultArr.push(separator);
            }
            resultArr.push(str);
        });
        return resultArr;
    };
    var addParentKey = function (filter, parentKey, operator) {
        if (operator === void 0) { operator = ' eq '; }
        if (parentKey != null) {
            if (Array.isArray(filter)) {
                if (filter.length === 1) {
                    filter = filter[0];
                }
                else {
                    filter = "(" + filter.join('') + ")";
                }
            }
            else {
                filter = "" + filter;
            }
            return [escapeResource(parentKey), operator, filter];
        }
        if (Array.isArray(filter)) {
            return filter;
        }
        return ["" + filter];
    };
    var applyBinds = function (filter, params, parentKey) {
        for (var index in params) {
            var param = params[index];
            var paramStr = "(" + buildFilter(param).join('') + ")";
            paramStr = paramStr.replace(/\$/g, '$$$$');
            filter = filter.replace(new RegExp("\\$" + index + "([^a-zA-Z0-9]|$)", 'g'), paramStr + "$1");
        }
        filter = "(" + filter + ")";
        return addParentKey(filter, parentKey);
    };
    var filterOperation = function (filter, operator, parentKey) {
        var op = ' ' + operator.slice(1) + ' ';
        if (isPrimitive(filter)) {
            var filterStr = escapeValue(filter);
            return addParentKey(filterStr, parentKey, op);
        }
        else if (Array.isArray(filter)) {
            var filterArr = handleFilterArray(filter);
            var filterStr = bracketJoin(filterArr, op);
            return addParentKey(filterStr, parentKey);
        }
        else if (isObject(filter)) {
            var result = handleFilterObject(filter);
            if (result.length < 1) {
                throw new Error(operator + " objects must have at least 1 property, got: " + JSON.stringify(filter));
            }
            if (result.length === 1) {
                return addParentKey(result[0], parentKey, op);
            }
            else {
                var filterStr = bracketJoin(result, op);
                return addParentKey(filterStr, parentKey);
            }
        }
        else {
            throw new Error('Expected null/string/number/bool/obj/array, got: ' + typeof filter);
        }
    };
    var filterFunction = function (filter, fnIdentifier, parentKey) {
        var fnName = fnIdentifier.slice(1);
        if (isPrimitive(filter)) {
            var operands = [];
            if (parentKey != null) {
                operands.push(escapeResource(parentKey));
            }
            operands.push(escapeValue(filter));
            return [fnName + "(" + operands.join() + ")"];
        }
        else if (Array.isArray(filter)) {
            var filterArr = handleFilterArray(filter);
            var filterStr = filterArr.map(function (subArr) { return subArr.join(''); }).join(',');
            filterStr = fnName + "(" + filterStr + ")";
            return addParentKey(filterStr, parentKey);
        }
        else if (isObject(filter)) {
            var filterArr = handleFilterObject(filter);
            var filterStr = filterArr.map(function (subArr) { return subArr.join(''); }).join(',');
            filterStr = fnName + "(" + filterStr + ")";
            return addParentKey(filterStr, parentKey);
        }
        else {
            throw new Error("Expected null/string/number/obj/array, got: " + typeof filter);
        }
    };
    var handleFilterOperator = function (filter, operator, parentKey) {
        switch (operator) {
            case '$ne':
            case '$eq':
            case '$gt':
            case '$ge':
            case '$lt':
            case '$le':
            case '$add':
            case '$sub':
            case '$mul':
            case '$div':
            case '$mod':
                return filterOperation(filter, operator, parentKey);
            case '$contains':
            case '$endswith':
            case '$startswith':
            case '$length':
            case '$indexof':
            case '$substring':
            case '$tolower':
            case '$toupper':
            case '$trim':
            case '$concat':
            case '$year':
            case '$month':
            case '$day':
            case '$hour':
            case '$minute':
            case '$second':
            case '$fractionalseconds':
            case '$date':
            case '$time':
            case '$totaloffsetminutes':
            case '$now':
            case '$maxdatetime':
            case '$mindatetime':
            case '$totalseconds':
            case '$round':
            case '$floor':
            case '$ceiling':
            case '$isof':
            case '$cast':
                return filterFunction(filter, operator, parentKey);
            case '$raw': {
                if (isString(filter)) {
                    filter = "(" + filter + ")";
                    return addParentKey(filter, parentKey);
                }
                else if (!isPrimitive(filter)) {
                    if (Array.isArray(filter)) {
                        var rawFilter = filter[0], params = filter.slice(1);
                        if (!isString(rawFilter)) {
                            throw new Error("First element of array for " + operator + " must be a string, got: " + typeof rawFilter);
                        }
                        var mappedParams = {};
                        for (var index = 0; index < params.length; index++) {
                            mappedParams[index + 1] = params[index];
                        }
                        return applyBinds(rawFilter, mappedParams, parentKey);
                    }
                    else if (isObject(filter)) {
                        var params = filter;
                        var filterStr_1 = filter.$string;
                        if (!isString(filterStr_1)) {
                            throw new Error("$string element of object for " + operator + " must be a string, got: " + typeof filterStr_1);
                        }
                        var mappedParams = {};
                        for (var index in params) {
                            if (index !== '$string') {
                                if (!/^[a-zA-Z0-9]+$/.test(index)) {
                                    throw new Error(operator + " param names must contain only [a-zA-Z0-9], got: " + index);
                                }
                                mappedParams[index] = params[index];
                            }
                        }
                        return applyBinds(filterStr_1, mappedParams, parentKey);
                    }
                }
                else {
                    throw new Error("Expected string/array/object for " + operator + ", got: " + typeof filter);
                }
            }
            case '$': {
                var resource = escapeResource(filter);
                return addParentKey(resource, parentKey);
            }
            case '$and':
            case '$or': {
                var filterStr_2 = buildFilter(filter, undefined, " " + operator.slice(1) + " ");
                return addParentKey(filterStr_2, parentKey);
            }
            case '$in': {
                if (isPrimitive(filter)) {
                    var filterStr_3 = escapeValue(filter);
                    return addParentKey(filterStr_3, parentKey, ' eq ');
                }
                else if (Array.isArray(filter)) {
                    if (filter.every(isPrimitive)) {
                        var filterStr_4 = handleFilterArray(filter, undefined, 1);
                        var inStr = bracketJoin(filterStr_4, ', ').join('');
                        return addParentKey("(" + inStr + ")", parentKey, ' in ');
                    }
                    var filterStr_5 = handleFilterArray(filter, parentKey, 1);
                    return bracketJoin(filterStr_5, ' or ');
                }
                else if (isObject(filter)) {
                    var filterArr = handleFilterObject(filter, parentKey);
                    if (filterArr.length < 1) {
                        throw new Error(operator + " objects must have at least 1 property, got: " + JSON.stringify(filter));
                    }
                    return bracketJoin(filterArr, ' or ');
                }
                else {
                    throw new Error("Expected null/string/number/bool/obj/array, got: " + typeof filter);
                }
            }
            case '$not': {
                var filterStr_6 = "not(" + buildFilter(filter).join('') + ")";
                return addParentKey(filterStr_6, parentKey);
            }
            case '$any':
            case '$all':
                var lamda = filter;
                var alias = lamda.$alias;
                var expr = lamda.$expr;
                if (alias == null) {
                    throw new Error("Lambda expression (" + operator + ") has no alias defined.");
                }
                if (expr == null) {
                    throw new Error("Lambda expression (" + operator + ") has no expr defined.");
                }
                var deprecatedFn = deprecated.expandFilter = noop;
                var filterStr = void 0;
                try {
                    filterStr = buildFilter(expr).join('');
                }
                finally {
                    deprecated.expandFilter = deprecatedFn;
                }
                filterStr = operator.slice(1) + "(" + alias + ":" + filterStr + ")";
                return addParentKey(filterStr, parentKey, '/');
            default:
                throw new Error("Unrecognised operator: '" + operator + "'");
        }
    };
    var handleFilterObject = function (filter, parentKey) {
        return mapObj(filter, function (value, key) {
            if (value === undefined) {
                throw new Error("'" + key + "' was present on a filter object but undefined, did you mean to use null instead?");
            }
            if (key[0] === '$') {
                return handleFilterOperator(value, key, parentKey);
            }
            else if (key[0] === '@') {
                if (!isString(value)) {
                    throw new Error("Parameter alias reference must be a string, got: " + typeof value);
                }
                var parameterAlias = "@" + encodeURIComponent(value);
                return addParentKey(parameterAlias, parentKey);
            }
            else {
                var keys = [key];
                if (parentKey != null) {
                    if (parentKey.length > 0) {
                        deprecated.expandFilter();
                    }
                    keys = parentKey.concat(keys);
                }
                return buildFilter(value, keys);
            }
        });
    };
    var handleFilterArray = function (filter, parentKey, minElements) {
        if (minElements === void 0) { minElements = 2; }
        if (filter.length < minElements) {
            throw new Error("Filter arrays must have at least " + minElements + " elements, got: " + JSON.stringify(filter));
        }
        return filter.map(function (value) {
            return buildFilter(value, parentKey);
        });
    };
    var buildFilter = function (filter, parentKey, joinStr) {
        if (isPrimitive(filter)) {
            var filterStr = escapeValue(filter);
            return addParentKey(filterStr, parentKey);
        }
        else if (Array.isArray(filter)) {
            var filterArr = handleFilterArray(filter);
            var filterStr = bracketJoin(filterArr, defaults(joinStr, ' or '));
            return addParentKey(filterStr, parentKey);
        }
        else if (isObject(filter)) {
            var filterArr = handleFilterObject(filter, parentKey);
            return bracketJoin(filterArr, defaults(joinStr, ' and '));
        }
        else {
            throw new Error("Expected null/string/number/obj/array, got: " + typeof filter);
        }
    };
    var buildOrderBy = function (orderby) {
        if (isString(orderby)) {
            return orderby;
        }
        else if (Array.isArray(orderby)) {
            if (orderby.length === 0) {
                throw new Error("'$orderby' arrays have to have at least 1 element");
            }
            var result = orderby.map(function (value) {
                if (Array.isArray(value)) {
                    throw new Error("'$orderby' cannot have nested arrays");
                }
                return buildOrderBy(value);
            });
            return join(result);
        }
        else if (isObject(orderby)) {
            var result = mapObj(orderby, function (dir, key) {
                if (dir !== 'asc' && dir !== 'desc') {
                    throw new Error("'$orderby' direction must be 'asc' or 'desc'");
                }
                return key + " " + dir;
            });
            if (result.length !== 1) {
                throw new Error("'$orderby' objects must have exactly one element, got " + result.length + " elements");
            }
            return result[0];
        }
        else {
            throw new Error("'$orderby' option has to be either a string, array, or object");
        }
    };
    var buildOption = function (option, value) {
        var compiledValue = '';
        switch (option) {
            case '$filter':
                compiledValue = buildFilter(value).join('');
                break;
            case '$expand':
                compiledValue = buildExpand(value);
                break;
            case '$orderby':
                compiledValue = buildOrderBy(value);
                break;
            case '$top':
            case '$skip':
                var num = value;
                if (!NumberIsFinite(num)) {
                    throw new Error("'" + option + "' option has to be a number");
                }
                compiledValue = '' + num;
                break;
            case '$select':
                var select = value;
                if (isString(select)) {
                    compiledValue = join(select);
                }
                else if (Array.isArray(select)) {
                    if (select.length === 0) {
                        throw new Error("'" + option + "' arrays have to have at least 1 element");
                    }
                    compiledValue = join(select);
                }
                else {
                    throw new Error("'" + option + "' option has to be either a string or array");
                }
                break;
            default:
                if (option[0] === '@') {
                    if (!isPrimitive(value)) {
                        throw new Error("Unknown type for parameter alias option '" + option + "': " + typeof value);
                    }
                    compiledValue = '' + escapeValue(value);
                }
                else if (Array.isArray(value)) {
                    compiledValue = join(value);
                }
                else if (isString(value)) {
                    compiledValue = value;
                }
                else if (isBoolean(value) || NumberIsFinite(value)) {
                    compiledValue = value.toString();
                }
                else {
                    throw new Error("Unknown type for option " + typeof value);
                }
        }
        return option + "=" + compiledValue;
    };
    var handleExpandOptions = function (expand, parentKey) {
        var expandOptions = [];
        for (var key in expand) {
            if (expand.hasOwnProperty(key)) {
                var value = expand[key];
                if (key[0] === '$') {
                    if (!isValidOption(key)) {
                        throw new Error("Unknown key option '" + key + "'");
                    }
                    expandOptions.push(buildOption(key, value));
                }
                else {
                    throw new Error("'$expand: " + parentKey + ": " + key + ": ...' is invalid, use '$expand: " + parentKey + ": $expand: " + key + ": ...' instead.");
                }
            }
        }
        var expandStr = expandOptions.join('&');
        if (expandStr.length > 0) {
            expandStr = "(" + expandStr + ")";
        }
        expandStr = escapeCountableResource(parentKey) + expandStr;
        return expandStr;
    };
    var handleExpandObject = function (expand) {
        var expands = [];
        for (var key in expand) {
            if (expand.hasOwnProperty(key)) {
                if (key[0] === '$') {
                    throw new Error('Cannot have expand options without first expanding something!');
                }
                var value = expand[key];
                if (isPrimitive(value)) {
                    var jsonValue = JSON.stringify(value);
                    throw new Error("'$expand: " + key + ": " + jsonValue + "' is invalid, use '$expand: " + key + ": $expand: " + jsonValue + "' instead.");
                }
                if (Array.isArray(value)) {
                    throw new Error("'$expand: " + key + ": [...]' is invalid, use '$expand: " + key + ": {...}' instead.");
                }
                expands.push(handleExpandOptions(value, key));
            }
        }
        return expands;
    };
    var handleExpandArray = function (expands) {
        if (expands.length < 1) {
            throw new Error("Expand arrays must have at least 1 elements, got: " + JSON.stringify(expands));
        }
        return expands.map(function (expand) {
            return buildExpand(expand);
        });
    };
    var buildExpand = function (expand) {
        if (isPrimitive(expand)) {
            return escapeCountableResource(expand);
        }
        else if (Array.isArray(expand)) {
            var expandStr = handleExpandArray(expand);
            return join(expandStr);
        }
        else if (isObject(expand)) {
            var expandStr = handleExpandObject(expand);
            return join(expandStr);
        }
        else {
            throw new Error("Unknown type for expand '" + typeof expand + "'");
        }
    };
    var validParams = [
        'apiPrefix',
        'passthrough',
        'passthroughByMethod'
    ];
    var PinejsClientCore = (function () {
        function PinejsClientCore(params) {
            this.apiPrefix = '/';
            this.passthrough = {};
            this.passthroughByMethod = {};
            if (isString(params)) {
                params = { apiPrefix: params };
            }
            if (isObject(params)) {
                for (var _i = 0, validParams_1 = validParams; _i < validParams_1.length; _i++) {
                    var validParam = validParams_1[_i];
                    var value = params[validParam];
                    if (value != null) {
                        this[validParam] = value;
                    }
                }
            }
        }
        PinejsClientCore.prototype.clone = function (params, backendParams) {
            if (isString(params)) {
                params = { apiPrefix: params };
            }
            var cloneParams = {};
            for (var _i = 0, validParams_2 = validParams; _i < validParams_2.length; _i++) {
                var validParam = validParams_2[_i];
                if (this[validParam] != null) {
                    cloneParams[validParam] = this[validParam];
                }
                if (params != null && params[validParam] != null) {
                    cloneParams[validParam] = params[validParam];
                }
            }
            var cloneBackendParams = {};
            if (isObject(this.backendParams)) {
                cloneBackendParams = __assign({}, this.backendParams);
            }
            if (isObject(backendParams)) {
                cloneBackendParams = __assign({}, cloneBackendParams, backendParams);
            }
            return new this.constructor(cloneParams, cloneBackendParams);
        };
        PinejsClientCore.prototype.get = function (params) {
            var singular = isObject(params) && params.id != null;
            return this.request(params, { method: 'GET' }).then(function (data) {
                if (!isObject(data)) {
                    throw new Error("Response was not a JSON object: '" + typeof data + "'");
                }
                if (data.d == null) {
                    throw new Error("Invalid response received, the 'd' property is missing.");
                }
                if (singular) {
                    if (data.d.length > 1) {
                        throw new Error('Returned multiple results when only one was expected.');
                    }
                    return data.d[0];
                }
                return data.d;
            });
        };
        PinejsClientCore.prototype.query = function (params) {
            return this.get(params);
        };
        PinejsClientCore.prototype.subscribe = function (params) {
            var _this = this;
            var singular = isObject(params) && params.id != null;
            var pollInterval;
            var compiledUrl = this.compile(params);
            if (isString(params)) {
                params = compiledUrl;
            }
            else {
                params.url = compiledUrl;
                pollInterval = params.pollInterval;
            }
            var requestFn = function () {
                return _this.request(params, { method: 'GET' }).then(function (data) {
                    if (!isObject(data)) {
                        throw new Error("Response was not a JSON object: '" + typeof data + "'");
                    }
                    if (data.d == null) {
                        throw new Error("Invalid response received, the 'd' property is missing.");
                    }
                    if (singular) {
                        if (data.d.length > 1) {
                            throw new Error('Returned multiple results when only one was expected.');
                        }
                        return data.d[0];
                    }
                    return data.d;
                });
            };
            return new Poll(requestFn, pollInterval);
        };
        PinejsClientCore.prototype.put = function (params) {
            return this.request(params, { method: 'PUT' });
        };
        PinejsClientCore.prototype.patch = function (params) {
            return this.request(params, { method: 'PATCH' });
        };
        PinejsClientCore.prototype.post = function (params) {
            return this.request(params, { method: 'POST' });
        };
        PinejsClientCore.prototype.delete = function (params) {
            return this.request(params, { method: 'DELETE' });
        };
        PinejsClientCore.prototype.compile = function (params) {
            if (isString(params)) {
                return params;
            }
            else if (params.url != null) {
                return params.url;
            }
            else {
                if (params.resource == null) {
                    throw new Error('Either the url or resource must be specified.');
                }
                var url = escapeCountableResource(params.resource);
                if (params.hasOwnProperty('id')) {
                    if (params.id == null) {
                        throw new Error('If the id property is set it must be non-null');
                    }
                    url += "(" + escapeValue(params.id) + ")";
                }
                var queryOptions = [];
                if (params.options != null) {
                    queryOptions = mapObj(params.options, function (value, option) {
                        if (option[0] === '$' && !isValidOption(option)) {
                            throw new Error("Unknown odata option '" + option + "'");
                        }
                        return buildOption(option, value);
                    });
                }
                if (params.customOptions != null) {
                    throw new Error('`customOptions` has been removed, use `options` instead.');
                }
                if (queryOptions.length > 0) {
                    url += '?' + queryOptions.join('&');
                }
                return url;
            }
        };
        PinejsClientCore.prototype.request = function (params, overrides) {
            if (overrides === void 0) { overrides = {}; }
            var _a;
            try {
                var method = void 0;
                var body = void 0;
                var passthrough = {};
                var apiPrefix = void 0;
                if (isString(params)) {
                    method = 'GET';
                }
                else {
                    (method = params.method, body = params.body, _a = params.passthrough, passthrough = _a === void 0 ? {} : _a, apiPrefix = params.apiPrefix);
                }
                apiPrefix = defaults(apiPrefix, this.apiPrefix);
                var url = apiPrefix + this.compile(params);
                method = defaults(method, overrides.method, 'GET');
                method = method.toUpperCase();
                var opts = __assign({}, this.passthrough, defaults(this.passthroughByMethod[method], {}), passthrough, { url: url,
                    body: body }, overrides, { method: method });
                return this._request(opts);
            }
            catch (e) {
                return Promise.reject(e);
            }
        };
        return PinejsClientCore;
    }());
    return PinejsClientCore;
}
exports.PinejsClientCoreFactory = PinejsClientCoreFactory;
//# sourceMappingURL=core.js.map